--------------------------------------------------------
--  DDL for Package PG_TEST_UPSERT_CUSTOMER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "CIFX"."PG_TEST_UPSERT_CUSTOMER" AS
   --  ====== 全資訊record宣告 ====
        TYPE g_r_json_type IS RECORD (
            input_json                      cifx.TB_QUERY_TRX_MAPPING.OUT_PARA_NAME %TYPE,
            input_value                     VARCHAR2(200 CHAR),
            db_column_name                  cifx.TB_COLUMN_CODE.COLUMN_NAME         %TYPE,
            data_type                       VARCHAR2(50 CHAR),
            output_value                    VARCHAR2(210 CHAR),  --varchar2 頭尾會多加('')保持文字
            table_index                     pls_integer
        );
        TYPE g_t_json_type IS TABLE OF g_r_json_type INDEX BY cifx.TB_COLUMN_CODE.COLUMN_NAME%TYPE;
        g_model_tab                         g_t_json_type;

        TYPE g_r_column_code_type IS record(
            COLUMN_NAME                     CIFX.TB_COLUMN_CODE.COLUMN_NAME         %TYPE,
            COLUMN_CODE_ID                  CIFX.TB_COLUMN_CODE.COLUMN_CODE_ID      %TYPE);
        TYPE g_t_column_code_type IS TABLE OF g_r_column_code_type            INDEX BY CIFX.TB_COLUMN_CODE.COLUMN_NAME %TYPE;
        g_column_code_tab                   g_t_column_code_type;--用來COLUMN_NAME轉COLUMN_CODE_ID

        g_id                                cifx.tb_customer.CIF_ORIGINAL_ID    %TYPE;
        g_birthday                          cifx.tb_customer.BIRTHDAY           %TYPE;

        --判斷群組欄位用變數
        TYPE g_t_column_group_type IS TABLE OF cifx.TB_COLUMN_CODE_OPT.COLUMN_GROUP %TYPE INDEX BY cifx.TB_COLUMN_CODE_OPT.COLUMN_NAME %TYPE;
        g_column_group_map                  g_t_column_group_type;
        g_full_group_column_jo              json_object_t := NEW json_object_t;--存TB_COLUMN_CODE_OPT所有群組欄位關係

        TYPE g_t_kyc_type IS TABLE OF cifx.TB_KEY_VALUE_CODE.CODE_VALUE %TYPE INDEX BY cifx.TB_KEY_VALUE_CODE.CODE_VALUE %TYPE ;
        g_t_def_kyc                         g_t_kyc_type := NEW g_t_kyc_type();--kyc在tb_key_value_code的所有定義
        g_t_cust_kyc                        g_t_kyc_type := NEW g_t_kyc_type();--顧客當下的kyc

        PROCEDURE SP_LOAD_COLUMN_CODE_MAP;

        PROCEDURE SP_INSERT_SERVICE_EXECUTION_CONTROL(i_sec_record      IN  CIFX.TB_SERVICE_EXECUTION_CONTROL   %ROWTYPE);

        PROCEDURE SP_PARSE_CUSTOMER_BEFORE_AFTER_VALUE(i_is_missing_field   IN        boolean,
                                                       i_column_name        IN        cifx.TB_COLUMN_CODE.COLUMN_NAME             %TYPE,
                                                       i_customer           IN        CIFX.TB_CUSTOMER                            %ROWTYPE, --顧客變更前record
                                                       o_before_value       OUT       cifx.TB_CHANGE_LOG_LINEITEM.BEFORE_VALUE    %TYPE,
                                                       o_after_value        OUT       cifx.TB_CHANGE_LOG_LINEITEM.CHANGED_VALUE   %TYPE,
                                                       o_column_is_changed  OUT       boolean,
                                                       io_group_column_jo   IN OUT    json_object_t);
        PROCEDURE SP_PARSE_COLUMNS(i_input_json                        IN   CLOB,
                                   i_update_column_array               IN   cifx.input_tb_var_array,
                                   o_sender_code                       OUT  cifx.TB_SERVICE_INTERCHANGE.SENDER_CODE %TYPE);

        PROCEDURE SP_UPSERT_CUSTOMER_MAIN(i_input_json                  IN  CLOB,
                                          i_customer                    IN  CIFX.TB_CUSTOMER%ROWTYPE,   --顧客變更前record
                                          i_update_column_array         IN  CIFX.INPUT_TB_VAR_ARRAY,    --此次異動json欄位(已去除該次識別條件)
                                          i_service_interchange_id      IN  VARCHAR2,
                                          i_ap_server_to_exec           IN  cifx.TB_SERVICE_EXECUTION_CONTROL.AP_SERVER_TO_EXEC %TYPE);
        PROCEDURE SP_INSERT_CUSTOMER(i_json                             IN  CLOB,
                                     i_service_interchange_id           IN  VARCHAR2,
                                     i_sender_code                      IN  cifx.TB_SERVICE_INTERCHANGE.SENDER_CODE             %TYPE,
                                     i_ap_server_to_exec                IN  cifx.TB_SERVICE_EXECUTION_CONTROL.AP_SERVER_TO_EXEC %TYPE);
        PROCEDURE SP_UPDATE_CUSTOMER(i_json                             IN  CLOB,
                                     i_customer                         IN  cifx.tb_customer%rowtype,
                                     i_service_interchange_id           IN  VARCHAR2,
                                     i_sender_code                      IN  cifx.TB_SERVICE_INTERCHANGE.SENDER_CODE             %TYPE,
                                     i_ap_server_to_exec                IN  cifx.TB_SERVICE_EXECUTION_CONTROL.AP_SERVER_TO_EXEC %TYPE);
        PROCEDURE SP_SAVE_CHANGELOG(i_true_insert_false_update  IN  boolean,
                                    i_customer                  IN  CIFX.TB_CUSTOMER                                    %ROWTYPE, --顧客變更前record
                                    i_json                      IN  CLOB,
                                    i_service_interchange_id    IN  VARCHAR2,
                                    i_sender_code               IN  cifx.TB_SERVICE_INTERCHANGE.SENDER_CODE             %TYPE,
                                    i_customer_id               IN  cifx.TB_CUSTOMER.CUSTOMER_ID                        %TYPE,
                                    i_circikey                  IN  CIFX.TB_CUSTOMER.CIF_VERIFIED_ID                    %TYPE,
                                    i_cif_original_id           IN  CIFX.TB_CHANGE_LOG_LINEITEM.CIF_ORIGINAL_ID         %TYPE,
                                    i_birthday                  IN  CIFX.TB_CHANGE_LOG_LINEITEM.BIRTHDAY                %TYPE,
                                    i_ap_server_to_exec         IN  cifx.TB_SERVICE_EXECUTION_CONTROL.AP_SERVER_TO_EXEC %TYPE);

        PROCEDURE SP_INSERT_CHANGE_LOG(i_change_log_id           IN CIFX.TB_CHANGE_LOG.CHANGE_LOG_ID              %TYPE,
                                       i_service_interchange_id  IN CIFX.TB_CHANGE_LOG.SERVICE_INTERCHANGE_ID     %TYPE,
                                       i_circi_key               IN CIFX.TB_CHANGE_LOG.CIRCI_KEY                  %TYPE,
                                       i_source_type             IN CIFX.TB_CHANGE_LOG.SOURCE_TYPE                %TYPE,
                                       i_ori_trade_seq_no        IN CIFX.TB_CHANGE_LOG.ORI_TRADE_SEQ_NO           %TYPE,
                                       i_txn_operation_date      IN CIFX.TB_CHANGE_LOG.TXN_OPERATION_DATE         %TYPE,
                                       i_txn_sequence            IN CIFX.TB_CHANGE_LOG.TXN_SEQUENCE               %TYPE,
                                       i_txn_operation_time      IN CIFX.TB_CHANGE_LOG.TXN_OPERATION_TIME         %TYPE,
                                       i_supervisor_code         IN CIFX.TB_CHANGE_LOG.SUPERVISOR_CODE            %TYPE,
                                       i_tx_id                   IN CIFX.TB_CHANGE_LOG.TX_ID                      %TYPE,
                                       i_branch_id               IN CIFX.TB_CHANGE_LOG.BRANCH_ID                  %TYPE,
                                       i_teller_id               IN CIFX.TB_CHANGE_LOG.TELLER_ID                  %TYPE,
                                       i_operate_id              IN CIFX.TB_CHANGE_LOG.OPERATE_ID                 %TYPE,
                                       i_supervisor_id           IN CIFX.TB_CHANGE_LOG.SUPERVISOR_ID              %TYPE,
                                       i_supervisor_card_code    IN CIFX.TB_CHANGE_LOG.SUPERVISOR_CARD_CODE       %TYPE,
                                       i_force_update            IN CIFX.TB_CHANGE_LOG.FORCE_UPDATE               %TYPE,
                                       i_create_timestamp        IN CIFX.TB_CHANGE_LOG.CREATE_TIMESTAMP           %TYPE,
                                       i_no_send_to_cip_flag     IN CIFX.TB_CHANGE_LOG.NO_SEND_TO_CIP_FLAG        %TYPE,
                                       i_txn_time                IN CIFX.TB_CHANGE_LOG.TXN_TIME                   %TYPE,
                                       i_trade_date_in_ap        IN CIFX.TB_CHANGE_LOG.TRADE_DATE_IN_AP           %TYPE,
                                       i_trade_time_in_ap        IN CIFX.TB_CHANGE_LOG.TRADE_TIME_IN_AP           %TYPE,
                                       i_edls_ori_trade_seq_no   IN CIFX.TB_CHANGE_LOG.EDLS_ORI_TRADE_SEQ_NO      %TYPE,
                                       i_edls_source_code        IN CIFX.TB_CHANGE_LOG.EDLS_SOURCE_CODE           %TYPE,
                                       i_sender_code             IN CIFX.TB_CHANGE_LOG.SENDER_CODE                %TYPE);

        PROCEDURE SP_INSERT_CHANGE_LOG_LINEITEM(i_change_log_lineitem_id    IN  CIFX.TB_CHANGE_LOG_LINEITEM.CHANGE_LOG_LINEITEM_ID      %TYPE,
                                                i_change_log_id             IN  CIFX.TB_CHANGE_LOG_LINEITEM.CHANGE_LOG_ID               %TYPE,
                                                i_table_pk                  IN  CIFX.TB_CHANGE_LOG_LINEITEM.TABLE_PK                    %TYPE,
                                                i_msg_no                    IN  CIFX.TB_CHANGE_LOG_LINEITEM.MSG_NO                      %TYPE,
                                                i_sent_priority             IN  CIFX.TB_CHANGE_LOG_LINEITEM.SENT_PRIORITY               %TYPE,
                                                i_func_id                   IN  CIFX.TB_CHANGE_LOG_LINEITEM.FUNC_ID                     %TYPE,
                                                i_change_type               IN  CIFX.TB_CHANGE_LOG_LINEITEM.CHANGE_TYPE                 %TYPE,
                                                i_changed_column_code_id    IN  CIFX.TB_CHANGE_LOG_LINEITEM.CHANGED_COLUMN_CODE_ID      %TYPE,
                                                i_before_value              IN  CIFX.TB_CHANGE_LOG_LINEITEM.BEFORE_VALUE                %TYPE,
                                                i_changed_value             IN  CIFX.TB_CHANGE_LOG_LINEITEM.CHANGED_VALUE               %TYPE,
                                                i_create_timestamp          IN  CIFX.TB_CHANGE_LOG_LINEITEM.CREATE_TIMESTAMP            %TYPE,
                                                i_sent_timestamp            IN  CIFX.TB_CHANGE_LOG_LINEITEM.SENT_TIMESTAMP              %TYPE,
                                                i_circi_key                 IN  CIFX.TB_CHANGE_LOG_LINEITEM.CIRCI_KEY                   %TYPE,
                                                i_property_type_code        IN  CIFX.TB_CHANGE_LOG_LINEITEM.PROPERTY_TYPE_CODE          %TYPE,
                                                i_cif_original_id           IN  CIFX.TB_CHANGE_LOG_LINEITEM.CIF_ORIGINAL_ID             %TYPE,
                                                i_birthday                  IN  CIFX.TB_CHANGE_LOG_LINEITEM.BIRTHDAY                    %TYPE);
END PG_TEST_UPSERT_CUSTOMER;

/
--------------------------------------------------------
--  DDL for Package Body PG_TEST_UPSERT_CUSTOMER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "CIFX"."PG_TEST_UPSERT_CUSTOMER" AS
--notepad++關debug資訊
--^(.*)(developement debug tracing)$
--\-\-\1\2
    PROCEDURE SP_PARSE_COLUMNS (i_input_json                            IN   CLOB,
                                i_update_column_array                   IN   cifx.input_tb_var_array,    --此次異動json欄位(已去除該次識別條件)
                                o_sender_code                           OUT  cifx.TB_SERVICE_INTERCHANGE.SENDER_CODE %TYPE) AS
/*  功能：1.PARSE JSON  2.依據ACT&OPT表篩選可異動欄位  3.JSON欄位轉成DB欄位並回傳
*/
        l_jsb_t                            json_object_t;
        l_model_json_key_list              json_key_list;

        l_index                            INTEGER := 0;
        l_model_json                       CLOB := NULL;

        TYPE t_json_tab IS
            TABLE OF g_r_json_type INDEX BY PLS_INTEGER;
        l_model_tab                         t_json_tab;

    --接使用EXECUTE IMMEDIATE 回傳BULK型態
        TYPE bulk_column_name_type IS
            TABLE OF cifx.tb_column_code.column_name%TYPE INDEX BY PLS_INTEGER;
        TYPE bulk_update_json_name_type IS
            TABLE OF cifx.tb_column_code.column_name%TYPE INDEX BY PLS_INTEGER;
        TYPE bulk_column_data_type_type IS
            TABLE OF cifx.tb_column_code_opt.data_type%TYPE INDEX BY PLS_INTEGER;
        l_bulk_update_column_name          bulk_column_name_type;
        l_bulk_update_json_name            bulk_update_json_name_type;
        l_bulk_column_opt_data_type        bulk_column_data_type_type;

   --放入config中json欄位和db欄位名稱對應
        TYPE v_map_type IS
            TABLE OF VARCHAR2(200) INDEX BY CIFX.TB_COLUMN_CODE_OPT.JSON_NAME %TYPE;
        l_model_json_map                   v_map_type;
        TYPE varrary_type IS
            TABLE OF VARCHAR2(256 CHAR);
        l_update_json_col_with_comma_str   VARCHAR2(3000 CHAR) := '';
        v_sql                              CLOB := '';
    BEGIN
        dbms_output.put_line('============== SP_PARSE_COLUMNS START =============');--developement debug tracing
        l_model_json := JSON_QUERY(i_input_json, '$.requestBody.model' PRETTY);
        o_sender_code := JSON_VALUE(i_input_json, '$.header.senderCode');
        l_model_tab.DELETE;
        g_id := '';
        g_birthday := '';

    --取出model json電文
        l_jsb_t := json_object_t.parse(l_model_json);
     --取得model json電文所有key值(包含了識別欄位)
        l_model_json_key_list := l_jsb_t.get_keys;

     --將model中json key-value關係 存放在map中
     --儲存id+生日 to global變數，以便後續建檔(insert)產歸戶編號
        FOR i IN 1..l_model_json_key_list.count LOOP
            dbms_output.put_line('model key值:' || l_model_json_key_list(i) || ',model value值:' || l_jsb_t.get_string(l_model_json_key_list(i)));--developement debug tracing
            l_model_json_map(l_model_json_key_list(i)) := l_jsb_t.get_string(l_model_json_key_list(i));
            CASE    l_model_json_key_list(i)
            WHEN    'birthday' THEN
                    g_birthday := l_jsb_t.get_string(l_model_json_key_list(i));
            WHEN    'customerCertificationNumber' THEN
                    g_id := l_jsb_t.get_string(l_model_json_key_list(i));
            ELSE    NULL;
            END CASE;
        END LOOP;

     --組合inpout json name where條件字串
        l_update_json_col_with_comma_str := '';

     --確認input json column array
        FOR j IN 1..i_update_column_array.count LOOP
            dbms_output.put_line('input json column array:' || i_update_column_array(j));--developement debug tracing--developement debug tracing
            l_update_json_col_with_comma_str := l_update_json_col_with_comma_str || '''' || i_update_column_array(j) || '''' || ',';
        END LOOP;
        l_update_json_col_with_comma_str := substr(l_update_json_col_with_comma_str, 0, length(l_update_json_col_with_comma_str) - 1);--去掉最後一個column json逗號
        dbms_output.put_line('column json str :' || l_update_json_col_with_comma_str);--developement debug tracing

    --撈出定義可異動之欄位集合
        v_sql := 'SELECT    opt.column_name, opt.json_name, opt.data_type
                  FROM      cifx.tb_sys_col_act act
                  JOIN      cifx.tb_column_code_opt opt ON opt.column_code = act.column_code
                  WHERE     act.act_type = ''U'' AND act.sender_code = :1
                  AND       opt.table_name = ''TB_CUSTOMER'' AND opt.json_name IN (' || l_update_json_col_with_comma_str || ')';

        dbms_output.put_line('collect alterable v_sql:' || v_sql);--developement debug tracing
        EXECUTE IMMEDIATE   v_sql
        BULK COLLECT INTO   l_bulk_update_column_name, l_bulk_update_json_name, l_bulk_column_opt_data_type
        USING               o_sender_code;

    -- record array 賦值
        FOR i IN 1..l_bulk_update_column_name.count LOOP
        -- 加入input json 異動欄位至record array
            l_model_tab(i).db_column_name            := l_bulk_update_column_name(i);
            l_model_tab(i).input_json                := l_bulk_update_json_name(i);
            l_model_tab(i).input_value               := l_model_json_map(l_bulk_update_json_name(i));
            l_model_tab(i).data_type                 := l_bulk_column_opt_data_type(i);
            IF      l_model_tab(i).data_type IS NOT NULL AND l_model_tab(i).data_type = 'VARCHAR2' THEN
                    l_model_tab(i).output_value  := '''' || l_model_tab(i).input_value || '''';
            ELSE
                    l_model_tab(i).output_value  := l_model_tab(i).input_value;
            END IF;
        END LOOP;

      --確認record array--developement debug tracing
        dbms_output.put_line('==  確認record array start ===');--developement debug tracing
        l_index := l_model_tab.first;--developement debug tracing
        WHILE l_index IS NOT NULL LOOP--developement debug tracing
            dbms_output.put_line('l_model_tab(' || l_index || '):' || l_model_tab(l_index).input_json || ', ' || l_model_tab(l_index).input_value || ',' || l_model_tab(l_index).db_column_name || ',' || l_model_tab(l_index).data_type);--developement debug tracing
            l_index := l_model_tab.next(l_index);--developement debug tracing
        END LOOP;--developement debug tracing
        dbms_output.put_line('==  確認record array end ===');--developement debug tracing

        --將array複製到global assoc-array
        FOR ii IN 1..l_model_tab.count LOOP
            g_model_tab(l_model_tab(ii).db_column_name) := l_model_tab(ii);
            g_model_tab(l_model_tab(ii).db_column_name).table_index := ii;
        END LOOP;
        dbms_output.put_line('============== SP_PARSE_COLUMNS END =============');--developement debug tracing
    END SP_PARSE_COLUMNS;

    PROCEDURE SP_UPSERT_CUSTOMER_MAIN(i_input_json                  IN  CLOB,
                                      i_customer                    IN  CIFX.TB_CUSTOMER%ROWTYPE,   --顧客變更前record
                                      i_update_column_array         IN  CIFX.INPUT_TB_VAR_ARRAY,    --此次異動json欄位(已去除該次識別條件)
                                      i_service_interchange_id      IN  VARCHAR2,
                                      i_ap_server_to_exec           IN  cifx.TB_SERVICE_EXECUTION_CONTROL.AP_SERVER_TO_EXEC %TYPE) AS
/*  功能：建檔/異動 customer入口 SP
 *  備註：outer流程會控管查詢customer >1時，不進入此SP
 */
        l_sender_code       cifx.TB_SERVICE_INTERCHANGE.SENDER_CODE %TYPE := '';
    BEGIN
        dbms_output.put_line('============= SP_UPSERT_CUSTOMER_MAIN START ==============');--developement debug tracing
        g_model_tab.DELETE;--全域變數 異動欄位清單，life cycle is "session level"
        SP_PARSE_COLUMNS(i_input_json, i_update_column_array, l_sender_code);--PARSE輸入電文，整理可異動欄位清單，存到全域變數column-array(IN, IN, OUT)
        IF  i_customer.CUSTOMER_ID IS NULL  THEN
                SP_INSERT_CUSTOMER(i_input_json, i_service_interchange_id, l_sender_code, i_ap_server_to_exec);              --新增顧客主檔(IN, IN, IN, IN)
        ELSE
                SP_UPDATE_CUSTOMER(i_input_json, i_customer, i_service_interchange_id, l_sender_code, i_ap_server_to_exec);  --變更顧客主檔(IN, IN, IN, IN, IN)
        END IF;
        dbms_output.put_line('============= SP_UPSERT_CUSTOMER_MAIN END ==============');--developement debug tracing
    END SP_UPSERT_CUSTOMER_MAIN;

    PROCEDURE SP_INSERT_CUSTOMER(i_json                             IN  CLOB,
                                 i_service_interchange_id           IN  VARCHAR2,
                                 i_sender_code                      IN  cifx.TB_SERVICE_INTERCHANGE.SENDER_CODE             %TYPE,
                                 i_ap_server_to_exec                IN  cifx.TB_SERVICE_EXECUTION_CONTROL.AP_SERVER_TO_EXEC %TYPE) AS
        l_sql               varchar2(4000 char);
        l_index             cifx.TB_COLUMN_CODE.COLUMN_NAME     %TYPE;
        l_cust_id           cifx.TB_CUSTOMER.CUSTOMER_ID        %TYPE;
        l_customer          cifx.TB_CUSTOMER                    %ROWTYPE := null;
        l_cif_verified_id   cifx.TB_CUSTOMER.CIF_VERIFIED_ID    %TYPE;
        l_sec               cifx.TB_SERVICE_EXECUTION_CONTROL   %ROWTYPE := null;
    BEGIN
        dbms_output.put_line('============= 大建檔 START ==============');--developement debug tracing
        l_cust_id           := CIFX.FN_UUID_NUMBER30;                               --新建檔，取得customer_id
        l_cif_verified_id   := CIFX.FN_VERIFIED_ID_GENERATOR(g_id, g_birthday);     --新建檔，輸入id+生日取得歸戶統編
        l_index := g_model_tab.FIRST;

        l_sql := 'INSERT INTO CIFX.TB_CUSTOMER (CUSTOMER_ID,CIF_VERIFIED_ID';
        --g_model_tab:json欄位清單 join 異動欄位清單 join 可異動欄位
        l_index := g_model_tab.FIRST;
        --製作insert SQL
        WHILE   l_index IS NOT NULL LOOP
            l_sql := l_sql || ', ' ||  g_model_tab(l_index).db_column_name;
            l_index := g_model_tab.NEXT(l_index);
        END LOOP;
        l_sql := l_sql || ') VALUES (''' || l_cust_id || ''',''' || l_cif_verified_id || '''';
        l_index := g_model_tab.FIRST;
        WHILE   l_index IS NOT NULL LOOP
            l_sql := l_sql || ', ' ||  g_model_tab(l_index).output_value;
            l_index := g_model_tab.NEXT(l_index);
        END LOOP;
        l_sql := l_sql || ')';
        SP_SAVE_CHANGELOG(TRUE, l_customer,  i_json, i_service_interchange_id, i_sender_code, l_cust_id, l_cif_verified_id,
                        g_id, g_birthday, i_ap_server_to_exec);--寫變更紀錄 (all input)
        dbms_output.put_line('insert sql=' || l_sql);--developement debug tracing
        EXECUTE IMMEDIATE l_sql;
        l_sec.CIRCI_KEY                 := l_cif_verified_id;
        l_sec.SERVICE_INTERCHANGE_ID    := i_service_interchange_id;
        l_sec.REQ_TIMESTAMP             := sysdate;
        l_sec.AP_SERVER_TO_EXEC         := i_ap_server_to_exec;
        SP_INSERT_SERVICE_EXECUTION_CONTROL(l_sec); --寫一筆待處理交易(java polling發一筆request電文)(系統如:CIP)
        dbms_output.put_line('============= 大建檔 END ==============');--developement debug tracing
    END SP_INSERT_CUSTOMER;

    PROCEDURE SP_UPDATE_CUSTOMER(i_json                             IN  CLOB,
                                 i_customer                         IN  cifx.tb_customer%rowtype,
                                 i_service_interchange_id           IN  VARCHAR2,
                                 i_sender_code                      IN  cifx.TB_SERVICE_INTERCHANGE.SENDER_CODE             %TYPE,
                                 i_ap_server_to_exec                IN  cifx.TB_SERVICE_EXECUTION_CONTROL.AP_SERVER_TO_EXEC %TYPE) AS
        l_index             cifx.TB_COLUMN_CODE.COLUMN_NAME         %TYPE;
        l_sql               varchar2(4000 char);
        l_cif_verified_id   cifx.TB_CUSTOMER.CIF_VERIFIED_ID        %TYPE;
        l_cif_original_id   cifx.TB_CUSTOMER.CIF_ORIGINAL_ID        %TYPE;
        l_birthday          cifx.TB_CUSTOMER.BIRTHDAY               %TYPE;
        l_force_update      varchar2(200);
        l_sec               cifx.TB_SERVICE_EXECUTION_CONTROL       %ROWTYPE := NULL;
    BEGIN
        dbms_output.put_line('============= 大異動 START ==============');--developement debug tracing
        --new value rather than old value
        IF  g_model_tab.exists('CIF_VERIFIED_ID') AND g_model_tab('CIF_VERIFIED_ID').output_value IS NOT NULL THEN
            l_cif_verified_id := g_model_tab('CIF_VERIFIED_ID').output_value;
        ELSE
            l_cif_verified_id := i_customer.CIF_VERIFIED_ID;
        END IF;
        IF  g_model_tab.exists('CIF_ORIGINAL_ID') AND g_model_tab('CIF_ORIGINAL_ID').output_value IS NOT NULL THEN
            l_cif_original_id := g_model_tab('CIF_ORIGINAL_ID').output_value;
        ELSE
            l_cif_original_id := i_customer.CIF_ORIGINAL_ID;
        END IF;
        --todo:要調整column array包含兼具識別、異動的當下非識別欄位(birthday...)
        IF  g_model_tab.exists('BIRTHDAY') AND g_model_tab('BIRTHDAY').output_value IS NOT NULL THEN
            l_birthday := g_model_tab('BIRTHDAY').output_value;
        ELSE
            l_birthday := i_customer.BIRTHDAY;
        END IF;

        l_sql := 'UPDATE /*+ INDEX (CIFX.TB_CUSTOMER IX4_IDX_CUSTOMER)*/ CIFX.TB_CUSTOMER SET ';
        l_index := g_model_tab.FIRST;
        WHILE   l_index IS NOT NULL LOOP
                l_sql := l_sql || g_model_tab(l_index).db_column_name || '=' || g_model_tab(l_index).output_value || ',' ;
                l_index := g_model_tab.NEXT(l_index);
        END LOOP;
        l_sql := substr(l_sql,1,length(l_sql)-1); --去除最後一個多餘逗號
        l_sql := l_sql || ' WHERE CUSTOMER_ID = ''' || i_customer.CUSTOMER_ID || '''';
        dbms_output.put_line('update sql=' || l_sql);--developement debug tracing
        SP_SAVE_CHANGELOG(FALSE, i_customer, i_json, i_service_interchange_id, i_sender_code, i_customer.CUSTOMER_ID,
                        l_cif_verified_id, l_cif_original_id, l_birthday, i_ap_server_to_exec);--寫變更紀錄(all input)
        EXECUTE IMMEDIATE l_sql;
        dbms_output.put_line('============= 大異動 END ==============');--developement debug tracing
    END SP_UPDATE_CUSTOMER;

    PROCEDURE SP_LOAD_COLUMN_CODE_MAP AS
        CURSOR c_mapping IS
            SELECT  COLUMN_NAME, COLUMN_CODE_ID FROM cifx.TB_COLUMN_CODE tcc
            WHERE   COLUMN_NAME IS NOT NULL;
        TYPE    t_column_code_tab IS TABLE OF g_r_column_code_type INDEX BY pls_integer;
        l_column_code_tab       t_column_code_tab;
    BEGIN
        l_column_code_tab.DELETE;
        g_column_code_tab.DELETE;
        OPEN    c_mapping;
        FETCH   c_mapping BULK COLLECT INTO l_column_code_tab;
        CLOSE   c_mapping;
        --bulk collect不接受varchar2 key，改用for loop copy array
        FOR ii IN 1..l_column_code_tab.count LOOP
            g_column_code_tab(l_column_code_tab(ii).COLUMN_NAME) := l_column_code_tab(ii);
        END LOOP;
    END SP_LOAD_COLUMN_CODE_MAP;

    PROCEDURE SP_PARSE_CUSTOMER_BEFORE_AFTER_VALUE(i_is_missing_field   IN        boolean,
                                                   i_column_name        IN        cifx.TB_COLUMN_CODE.COLUMN_NAME             %TYPE,
                                                   i_customer           IN        CIFX.TB_CUSTOMER                            %ROWTYPE, --顧客變更前record
                                                   o_before_value       OUT       cifx.TB_CHANGE_LOG_LINEITEM.BEFORE_VALUE    %TYPE,
                                                   o_after_value        OUT       cifx.TB_CHANGE_LOG_LINEITEM.CHANGED_VALUE   %TYPE,
                                                   o_column_is_changed  OUT       boolean,
                                                   io_group_column_jo   IN OUT    json_object_t) AS
/* 功能：設before、after value；設json變數用來寫群組欄位
 * 注意：tb_customer加欄位時，務必重跑下方的generate SQL
 *
 * 若有調整範例SQL，正規取代「\s+」為空白改成一行SQL，再更新GENERATE SQL。
 * json 資料結構：
 *  {
 *      "RESIDENCE_PERMIT":{
 *          "EXPIRED_DATE" : {
 *              "BEFORE_VALUE" : "123",
 *              "AFTER_VALUE" : "456",
 *              "IS_CHANGED" : true
 *               }
 *          ,"ISSUE_DATE" : {...}   <==這段沒異動時，會由後面程式補上
 *      }
 *  }
 */
        l_group_jo        JSON_OBJECT_T := NEW JSON_OBJECT_T;
        l_column_jo       JSON_OBJECT_T := NEW JSON_OBJECT_T;
    BEGIN
            o_column_is_changed := FALSE;
            CASE    i_column_name
--          example:
--                WHEN    'CIF_VERIFIED_ID'   THEN
--                        IF  i_is_missing_field = TRUE   THEN
--                            o_before_value      := i_customer.CIF_VERIFIED_ID;
--                            o_after_value       := o_before_value;
--                        ELSE
--                            IF  nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CIF_VERIFIED_ID,'_null') THEN
--                                o_column_is_changed := TRUE;
--                                o_before_value      := i_customer.CIF_VERIFIED_ID;
--                                o_after_value       := g_model_tab(i_column_name).input_value;
--                                IF  g_column_group_map.EXISTS(i_column_name) = TRUE    THEN
--                                    l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name));
--                                    IF  l_group_jo IS NULL    THEN
--                                        l_group_jo := NEW JSON_OBJECT_T;
--                                    END IF;
--                                    l_column_jo.put('IS_CHANGED'                                , true);
--                                    l_column_jo.put('BEFORE_VALUE'                              , i_customer.CIF_VERIFIED_ID);
--                                    l_column_jo.put('AFTER_VALUE'                               , g_model_tab(i_column_name).input_value);
--                                    l_group_jo.put(i_column_name                                , l_column_jo);
--                                    io_group_column_jo.put(g_column_group_map(i_column_name)    , l_group_jo);
--                                END IF;
--                            END IF;
--                        END IF;
--          generate SQL(1.「'」取代為「''」   2.「CIF_VERIFIED_ID」取代為「' || COLUMN_NAME || '」):
--select '取代後SQL' from all_tab_columns where owner = 'CIFX' and table_name = 'TB_CUSTOMER' AND COLUMN_NAME <> 'CUSTOMER_ID';
--select 'WHEN ''' || COLUMN_NAME || ''' THEN IF nvl(g_model_tab(i_column_name).input_value,''_null'') <> nvl(i_customer.' || COLUMN_NAME || ',''_null'') THEN o_column_is_changed := TRUE; o_before_value := i_customer.' || COLUMN_NAME || '; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put(''IS_CHANGED'' , true); l_column_jo.put(''BEFORE_VALUE'' , i_customer.' || COLUMN_NAME || '); l_column_jo.put(''AFTER_VALUE'' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; ELSE o_before_value := i_customer.' || COLUMN_NAME || '; o_after_value := o_before_value; END IF;' from all_tab_columns where owner = 'CIFX' and table_name = 'TB_CUSTOMER' AND COLUMN_NAME <> 'CUSTOMER_ID';
                WHEN 'CIF_VERIFIED_ID' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CIF_VERIFIED_ID; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CIF_VERIFIED_ID,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CIF_VERIFIED_ID; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CIF_VERIFIED_ID); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'FIRST_TXN_DATE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.FIRST_TXN_DATE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.FIRST_TXN_DATE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.FIRST_TXN_DATE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.FIRST_TXN_DATE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CREATION_DPT_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CREATION_DPT_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CREATION_DPT_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CREATION_DPT_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CREATION_DPT_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PRINCIPAL_CERT_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PRINCIPAL_CERT_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PRINCIPAL_CERT_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PRINCIPAL_CERT_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PRINCIPAL_CERT_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'TAX_ID_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.TAX_ID_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.TAX_ID_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.TAX_ID_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.TAX_ID_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'INDUSTRY_PROPS_TYPE_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.INDUSTRY_PROPS_TYPE_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.INDUSTRY_PROPS_TYPE_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.INDUSTRY_PROPS_TYPE_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.INDUSTRY_PROPS_TYPE_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'INCOME_TAX_TYPE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.INCOME_TAX_TYPE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.INCOME_TAX_TYPE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.INCOME_TAX_TYPE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.INCOME_TAX_TYPE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PRINCIPAL_NAME' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PRINCIPAL_NAME; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PRINCIPAL_NAME,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PRINCIPAL_NAME; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PRINCIPAL_NAME); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'BIRTHDAY' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.BIRTHDAY; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.BIRTHDAY,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.BIRTHDAY; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.BIRTHDAY); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'NATIONALITY' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.NATIONALITY; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.NATIONALITY,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.NATIONALITY; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.NATIONALITY); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'GENDER_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.GENDER_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.GENDER_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.GENDER_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.GENDER_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'REG_COUNTRY_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.REG_COUNTRY_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.REG_COUNTRY_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.REG_COUNTRY_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.REG_COUNTRY_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'EVER_CHANGED_CERT_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.EVER_CHANGED_CERT_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.EVER_CHANGED_CERT_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.EVER_CHANGED_CERT_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.EVER_CHANGED_CERT_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'MERGE_BANK' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.MERGE_BANK; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.MERGE_BANK,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.MERGE_BANK; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.MERGE_BANK); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CENTER_BATCH_CREATION' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CENTER_BATCH_CREATION; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CENTER_BATCH_CREATION,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CENTER_BATCH_CREATION; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CENTER_BATCH_CREATION); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PERFORMANCE_DPT_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PERFORMANCE_DPT_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PERFORMANCE_DPT_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PERFORMANCE_DPT_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PERFORMANCE_DPT_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PROPERTY_TYPE_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PROPERTY_TYPE_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PROPERTY_TYPE_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PROPERTY_TYPE_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PROPERTY_TYPE_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CUSTOMER_TYPE_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CUSTOMER_TYPE_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CUSTOMER_TYPE_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CUSTOMER_TYPE_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CUSTOMER_TYPE_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'DGBAS_INDUSTRY_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.DGBAS_INDUSTRY_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.DGBAS_INDUSTRY_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.DGBAS_INDUSTRY_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.DGBAS_INDUSTRY_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PRIOR_PERSON_IDENTIFITY_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PRIOR_PERSON_IDENTIFITY_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PRIOR_PERSON_IDENTIFITY_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PRIOR_PERSON_IDENTIFITY_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PRIOR_PERSON_IDENTIFITY_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'NCB_INDUSTRY_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.NCB_INDUSTRY_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.NCB_INDUSTRY_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.NCB_INDUSTRY_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.NCB_INDUSTRY_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'SERVE_COMPANY_NAME' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.SERVE_COMPANY_NAME; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.SERVE_COMPANY_NAME,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.SERVE_COMPANY_NAME; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.SERVE_COMPANY_NAME); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'SERVE_COMPANY_CERT_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.SERVE_COMPANY_CERT_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.SERVE_COMPANY_CERT_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.SERVE_COMPANY_CERT_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.SERVE_COMPANY_CERT_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'JOB_POSITION_TYPE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.JOB_POSITION_TYPE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.JOB_POSITION_TYPE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.JOB_POSITION_TYPE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.JOB_POSITION_TYPE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'INDUSTRY_TYPE_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.INDUSTRY_TYPE_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.INDUSTRY_TYPE_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.INDUSTRY_TYPE_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.INDUSTRY_TYPE_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PARENT_COMPANY_CERT_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PARENT_COMPANY_CERT_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PARENT_COMPANY_CERT_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PARENT_COMPANY_CERT_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PARENT_COMPANY_CERT_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'FOREIGN_BRANCH_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.FOREIGN_BRANCH_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.FOREIGN_BRANCH_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.FOREIGN_BRANCH_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.FOREIGN_BRANCH_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PARENT_COMPANY_COUNTRY' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PARENT_COMPANY_COUNTRY; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PARENT_COMPANY_COUNTRY,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PARENT_COMPANY_COUNTRY; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PARENT_COMPANY_COUNTRY); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CHINA_MASTER_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CHINA_MASTER_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CHINA_MASTER_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CHINA_MASTER_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CHINA_MASTER_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CHINA_SUB_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CHINA_SUB_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CHINA_SUB_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CHINA_SUB_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CHINA_SUB_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CIF_ORIGINAL_ID' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CIF_ORIGINAL_ID; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CIF_ORIGINAL_ID,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CIF_ORIGINAL_ID; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CIF_ORIGINAL_ID); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'DUP_CERT_NO_ORG_CHECKING_NUM' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.DUP_CERT_NO_ORG_CHECKING_NUM; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.DUP_CERT_NO_ORG_CHECKING_NUM,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.DUP_CERT_NO_ORG_CHECKING_NUM; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.DUP_CERT_NO_ORG_CHECKING_NUM); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CUST_NAME' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CUST_NAME; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CUST_NAME,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CUST_NAME; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CUST_NAME); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'ACCOUNT_PURPOSE_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.ACCOUNT_PURPOSE_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.ACCOUNT_PURPOSE_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.ACCOUNT_PURPOSE_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.ACCOUNT_PURPOSE_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'OTHER_ACCOUNT_PURPOSE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.OTHER_ACCOUNT_PURPOSE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.OTHER_ACCOUNT_PURPOSE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.OTHER_ACCOUNT_PURPOSE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.OTHER_ACCOUNT_PURPOSE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PERSONAL_ANNUAL_INCOME' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PERSONAL_ANNUAL_INCOME; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PERSONAL_ANNUAL_INCOME,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PERSONAL_ANNUAL_INCOME; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PERSONAL_ANNUAL_INCOME); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CPS_CUSTOMER_SOURCE_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CPS_CUSTOMER_SOURCE_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CPS_CUSTOMER_SOURCE_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CPS_CUSTOMER_SOURCE_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CPS_CUSTOMER_SOURCE_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'EDU_LEVEL_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.EDU_LEVEL_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.EDU_LEVEL_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.EDU_LEVEL_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.EDU_LEVEL_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'MARRIED_STATUS_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.MARRIED_STATUS_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.MARRIED_STATUS_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.MARRIED_STATUS_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.MARRIED_STATUS_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CHILDREN_NUM' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CHILDREN_NUM; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CHILDREN_NUM,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CHILDREN_NUM; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CHILDREN_NUM); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'INTRODUCER_PERSON_CER_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.INTRODUCER_PERSON_CER_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.INTRODUCER_PERSON_CER_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.INTRODUCER_PERSON_CER_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.INTRODUCER_PERSON_CER_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'MATE_CERT_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.MATE_CERT_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.MATE_CERT_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.MATE_CERT_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.MATE_CERT_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'ENTRY_EXIT_PERMIT_START_DATE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.ENTRY_EXIT_PERMIT_START_DATE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.ENTRY_EXIT_PERMIT_START_DATE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.ENTRY_EXIT_PERMIT_START_DATE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.ENTRY_EXIT_PERMIT_START_DATE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'ENTRY_EXIT_PERMIT_END_DATE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.ENTRY_EXIT_PERMIT_END_DATE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.ENTRY_EXIT_PERMIT_END_DATE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.ENTRY_EXIT_PERMIT_END_DATE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.ENTRY_EXIT_PERMIT_END_DATE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'ENTRY_EXIT_PERMIT_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.ENTRY_EXIT_PERMIT_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.ENTRY_EXIT_PERMIT_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.ENTRY_EXIT_PERMIT_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.ENTRY_EXIT_PERMIT_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'FOREIGN_EXCHANGE_ROLE_TYPE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.FOREIGN_EXCHANGE_ROLE_TYPE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.FOREIGN_EXCHANGE_ROLE_TYPE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.FOREIGN_EXCHANGE_ROLE_TYPE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.FOREIGN_EXCHANGE_ROLE_TYPE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'OFFICE_NOTE_DESCRIPTION' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.OFFICE_NOTE_DESCRIPTION; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.OFFICE_NOTE_DESCRIPTION,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.OFFICE_NOTE_DESCRIPTION; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.OFFICE_NOTE_DESCRIPTION); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'GOVERNMENT_OFFICIAL_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.GOVERNMENT_OFFICIAL_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.GOVERNMENT_OFFICIAL_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.GOVERNMENT_OFFICIAL_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.GOVERNMENT_OFFICIAL_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PARTY_ENGLISH_NAME' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PARTY_ENGLISH_NAME; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PARTY_ENGLISH_NAME,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PARTY_ENGLISH_NAME; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PARTY_ENGLISH_NAME); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'EXPIRED_DATE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.EXPIRED_DATE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.EXPIRED_DATE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.EXPIRED_DATE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.EXPIRED_DATE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'ISSUE_DATE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.ISSUE_DATE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.ISSUE_DATE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.ISSUE_DATE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.ISSUE_DATE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'EXCHANGE_RESIDENCE_PERMIT_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.EXCHANGE_RESIDENCE_PERMIT_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.EXCHANGE_RESIDENCE_PERMIT_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.EXCHANGE_RESIDENCE_PERMIT_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.EXCHANGE_RESIDENCE_PERMIT_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PASSPORT_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PASSPORT_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PASSPORT_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PASSPORT_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PASSPORT_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'EXCHANGE_CONTACT_PERSON_NAME' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.EXCHANGE_CONTACT_PERSON_NAME; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.EXCHANGE_CONTACT_PERSON_NAME,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.EXCHANGE_CONTACT_PERSON_NAME; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.EXCHANGE_CONTACT_PERSON_NAME); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'EXCHANGE_CONTACT_PERSON_PHONE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.EXCHANGE_CONTACT_PERSON_PHONE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.EXCHANGE_CONTACT_PERSON_PHONE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.EXCHANGE_CONTACT_PERSON_PHONE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.EXCHANGE_CONTACT_PERSON_PHONE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'LC_ORIGINAL_HANDLE_WAY' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.LC_ORIGINAL_HANDLE_WAY; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.LC_ORIGINAL_HANDLE_WAY,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.LC_ORIGINAL_HANDLE_WAY; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.LC_ORIGINAL_HANDLE_WAY); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONT_ENGLISH_ADDR_COUNTRYCODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONT_ENGLISH_ADDR_COUNTRYCODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONT_ENGLISH_ADDR_COUNTRYCODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONT_ENGLISH_ADDR_COUNTRYCODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONT_ENGLISH_ADDR_COUNTRYCODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONT_CITY' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONT_CITY; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONT_CITY,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONT_CITY; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONT_CITY); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CUST_ZIP_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CUST_ZIP_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CUST_ZIP_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CUST_ZIP_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CUST_ZIP_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONT_ADDRESS_DETAIL' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONT_ADDRESS_DETAIL; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONT_ADDRESS_DETAIL,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONT_ADDRESS_DETAIL; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONT_ADDRESS_DETAIL); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONT_AREA' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONT_AREA; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONT_AREA,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONT_AREA; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONT_AREA); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PER_CITY' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PER_CITY; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PER_CITY,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PER_CITY; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PER_CITY); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PER_ZIP' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PER_ZIP; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PER_ZIP,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PER_ZIP; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PER_ZIP); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'REGI_ADDRESS_DETAIL' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.REGI_ADDRESS_DETAIL; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.REGI_ADDRESS_DETAIL,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.REGI_ADDRESS_DETAIL; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.REGI_ADDRESS_DETAIL); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PER_AREA' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PER_AREA; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PER_AREA,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PER_AREA; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PER_AREA); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONT_ENGLISH_ADDR_ADMINAREA' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONT_ENGLISH_ADDR_ADMINAREA; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONT_ENGLISH_ADDR_ADMINAREA,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONT_ENGLISH_ADDR_ADMINAREA; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONT_ENGLISH_ADDR_ADMINAREA); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONT_ENGLISH_ADDR' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONT_ENGLISH_ADDR; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONT_ENGLISH_ADDR,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONT_ENGLISH_ADDR; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONT_ENGLISH_ADDR); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'OVERDUE_CREDIT_ACCOUNT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.OVERDUE_CREDIT_ACCOUNT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.OVERDUE_CREDIT_ACCOUNT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.OVERDUE_CREDIT_ACCOUNT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.OVERDUE_CREDIT_ACCOUNT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'DEBT_CONSULT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.DEBT_CONSULT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.DEBT_CONSULT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.DEBT_CONSULT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.DEBT_CONSULT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONSUMER_DEBT_CLEAN' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONSUMER_DEBT_CLEAN; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONSUMER_DEBT_CLEAN,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONSUMER_DEBT_CLEAN; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONSUMER_DEBT_CLEAN); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CREDIT_CARD_SETTLEMENT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CREDIT_CARD_SETTLEMENT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CREDIT_CARD_SETTLEMENT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CREDIT_CARD_SETTLEMENT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CREDIT_CARD_SETTLEMENT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'SPECIFIC_MEMBER_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.SPECIFIC_MEMBER_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.SPECIFIC_MEMBER_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.SPECIFIC_MEMBER_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.SPECIFIC_MEMBER_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'STOP_USE_CUSTOMER_DATA_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.STOP_USE_CUSTOMER_DATA_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.STOP_USE_CUSTOMER_DATA_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.STOP_USE_CUSTOMER_DATA_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.STOP_USE_CUSTOMER_DATA_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'TERRORISTS_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.TERRORISTS_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.TERRORISTS_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.TERRORISTS_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.TERRORISTS_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CUSTOMER_STATUS' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CUSTOMER_STATUS; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CUSTOMER_STATUS,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CUSTOMER_STATUS; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CUSTOMER_STATUS); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'REHABILITATED' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.REHABILITATED; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.REHABILITATED,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.REHABILITATED; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.REHABILITATED); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PRE_MEDIATE_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PRE_MEDIATE_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PRE_MEDIATE_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PRE_MEDIATE_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PRE_MEDIATE_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'ACCOUNT_REVIEW_STATE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.ACCOUNT_REVIEW_STATE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.ACCOUNT_REVIEW_STATE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.ACCOUNT_REVIEW_STATE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.ACCOUNT_REVIEW_STATE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'ACCOUNT_REVIEW_PENDING' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.ACCOUNT_REVIEW_PENDING; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.ACCOUNT_REVIEW_PENDING,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.ACCOUNT_REVIEW_PENDING; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.ACCOUNT_REVIEW_PENDING); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'BANK_INTERNAL_COMMON_SALE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.BANK_INTERNAL_COMMON_SALE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.BANK_INTERNAL_COMMON_SALE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.BANK_INTERNAL_COMMON_SALE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.BANK_INTERNAL_COMMON_SALE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'AGREE_CS_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.AGREE_CS_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.AGREE_CS_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.AGREE_CS_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.AGREE_CS_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'AGREE_CS_WITH_CONSENT_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.AGREE_CS_WITH_CONSENT_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.AGREE_CS_WITH_CONSENT_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.AGREE_CS_WITH_CONSENT_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.AGREE_CS_WITH_CONSENT_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'DM_SALE_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.DM_SALE_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.DM_SALE_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.DM_SALE_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.DM_SALE_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'SMS_SALE_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.SMS_SALE_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.SMS_SALE_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.SMS_SALE_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.SMS_SALE_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PHONE_SALE_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PHONE_SALE_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PHONE_SALE_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PHONE_SALE_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PHONE_SALE_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'EMAIL_SALE_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.EMAIL_SALE_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.EMAIL_SALE_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.EMAIL_SALE_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.EMAIL_SALE_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'NOTIFICATION_TYPE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.NOTIFICATION_TYPE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.NOTIFICATION_TYPE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.NOTIFICATION_TYPE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.NOTIFICATION_TYPE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'RESI_COMM_CONTENT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.RESI_COMM_CONTENT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.RESI_COMM_CONTENT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.RESI_COMM_CONTENT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.RESI_COMM_CONTENT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONT_COMM_CONTENT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONT_COMM_CONTENT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONT_COMM_CONTENT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONT_COMM_CONTENT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONT_COMM_CONTENT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'COMP_COMM_CONTENT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.COMP_COMM_CONTENT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.COMP_COMM_CONTENT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.COMP_COMM_CONTENT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.COMP_COMM_CONTENT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'RESE_COMM_CONTENT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.RESE_COMM_CONTENT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.RESE_COMM_CONTENT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.RESE_COMM_CONTENT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.RESE_COMM_CONTENT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONE_COMM_CONTENT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONE_COMM_CONTENT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONE_COMM_CONTENT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONE_COMM_CONTENT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONE_COMM_CONTENT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CMPE_COMM_CONTENT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CMPE_COMM_CONTENT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CMPE_COMM_CONTENT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CMPE_COMM_CONTENT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CMPE_COMM_CONTENT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CNTP_COMM_CONTENT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CNTP_COMM_CONTENT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CNTP_COMM_CONTENT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CNTP_COMM_CONTENT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CNTP_COMM_CONTENT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'TXNP_COMM_CONTENT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.TXNP_COMM_CONTENT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.TXNP_COMM_CONTENT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.TXNP_COMM_CONTENT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.TXNP_COMM_CONTENT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'BBCALL' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.BBCALL; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.BBCALL,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.BBCALL; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.BBCALL); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'FAXT_COMM_CONTENT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.FAXT_COMM_CONTENT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.FAXT_COMM_CONTENT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.FAXT_COMM_CONTENT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.FAXT_COMM_CONTENT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'EMAIL_COMM_CONTENT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.EMAIL_COMM_CONTENT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.EMAIL_COMM_CONTENT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.EMAIL_COMM_CONTENT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.EMAIL_COMM_CONTENT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'RESI_COMM_CONTENT2' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.RESI_COMM_CONTENT2; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.RESI_COMM_CONTENT2,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.RESI_COMM_CONTENT2; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.RESI_COMM_CONTENT2); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONT_COMM_CONTENT2' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONT_COMM_CONTENT2; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONT_COMM_CONTENT2,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONT_COMM_CONTENT2; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONT_COMM_CONTENT2); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'COMP_COMM_CONTENT2' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.COMP_COMM_CONTENT2; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.COMP_COMM_CONTENT2,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.COMP_COMM_CONTENT2; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.COMP_COMM_CONTENT2); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'RESE_COMM_CONTENT2' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.RESE_COMM_CONTENT2; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.RESE_COMM_CONTENT2,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.RESE_COMM_CONTENT2; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.RESE_COMM_CONTENT2); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONE_COMM_CONTENT2' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONE_COMM_CONTENT2; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONE_COMM_CONTENT2,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONE_COMM_CONTENT2; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONE_COMM_CONTENT2); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CMPE_COMM_CONTENT2' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CMPE_COMM_CONTENT2; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CMPE_COMM_CONTENT2,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CMPE_COMM_CONTENT2; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CMPE_COMM_CONTENT2); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CNTP_COMM_CONTENT2' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CNTP_COMM_CONTENT2; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CNTP_COMM_CONTENT2,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CNTP_COMM_CONTENT2; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CNTP_COMM_CONTENT2); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'TXNP_COMM_CONTENT2' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.TXNP_COMM_CONTENT2; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.TXNP_COMM_CONTENT2,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.TXNP_COMM_CONTENT2; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.TXNP_COMM_CONTENT2); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'BBCALL2' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.BBCALL2; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.BBCALL2,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.BBCALL2; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.BBCALL2); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'FAXT_COMM_CONTENT2' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.FAXT_COMM_CONTENT2; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.FAXT_COMM_CONTENT2,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.FAXT_COMM_CONTENT2; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.FAXT_COMM_CONTENT2); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'EMAIL_COMM_CONTENT2' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.EMAIL_COMM_CONTENT2; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.EMAIL_COMM_CONTENT2,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.EMAIL_COMM_CONTENT2; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.EMAIL_COMM_CONTENT2); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'RESI_COMM_CONTENT3' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.RESI_COMM_CONTENT3; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.RESI_COMM_CONTENT3,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.RESI_COMM_CONTENT3; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.RESI_COMM_CONTENT3); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONT_COMM_CONTENT3' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONT_COMM_CONTENT3; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONT_COMM_CONTENT3,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONT_COMM_CONTENT3; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONT_COMM_CONTENT3); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'COMP_COMM_CONTENT3' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.COMP_COMM_CONTENT3; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.COMP_COMM_CONTENT3,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.COMP_COMM_CONTENT3; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.COMP_COMM_CONTENT3); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'RESE_COMM_CONTENT3' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.RESE_COMM_CONTENT3; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.RESE_COMM_CONTENT3,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.RESE_COMM_CONTENT3; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.RESE_COMM_CONTENT3); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CONE_COMM_CONTENT3' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CONE_COMM_CONTENT3; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CONE_COMM_CONTENT3,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CONE_COMM_CONTENT3; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CONE_COMM_CONTENT3); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CMPE_COMM_CONTENT3' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CMPE_COMM_CONTENT3; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CMPE_COMM_CONTENT3,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CMPE_COMM_CONTENT3; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CMPE_COMM_CONTENT3); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CNTP_COMM_CONTENT3' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CNTP_COMM_CONTENT3; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CNTP_COMM_CONTENT3,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CNTP_COMM_CONTENT3; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CNTP_COMM_CONTENT3); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'TXNP_COMM_CONTENT3' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.TXNP_COMM_CONTENT3; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.TXNP_COMM_CONTENT3,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.TXNP_COMM_CONTENT3; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.TXNP_COMM_CONTENT3); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'BBCALL3' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.BBCALL3; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.BBCALL3,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.BBCALL3; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.BBCALL3); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'FAXT_COMM_CONTENT3' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.FAXT_COMM_CONTENT3; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.FAXT_COMM_CONTENT3,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.FAXT_COMM_CONTENT3; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.FAXT_COMM_CONTENT3); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'EMAIL_COMM_CONTENT3' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.EMAIL_COMM_CONTENT3; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.EMAIL_COMM_CONTENT3,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.EMAIL_COMM_CONTENT3; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.EMAIL_COMM_CONTENT3); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'REFUSE_LOAN_REASON' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.REFUSE_LOAN_REASON; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.REFUSE_LOAN_REASON,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.REFUSE_LOAN_REASON; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.REFUSE_LOAN_REASON); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CREDIT_CARD_HOLDER' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CREDIT_CARD_HOLDER; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CREDIT_CARD_HOLDER,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CREDIT_CARD_HOLDER; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CREDIT_CARD_HOLDER); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'INDIVIDUAL_CONSULTATION' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.INDIVIDUAL_CONSULTATION; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.INDIVIDUAL_CONSULTATION,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.INDIVIDUAL_CONSULTATION; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.INDIVIDUAL_CONSULTATION); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'JCIC_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.JCIC_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.JCIC_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.JCIC_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.JCIC_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'WISE_CUSTOMER_SEG_MAIN' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.WISE_CUSTOMER_SEG_MAIN; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.WISE_CUSTOMER_SEG_MAIN,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.WISE_CUSTOMER_SEG_MAIN; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.WISE_CUSTOMER_SEG_MAIN); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'FC_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.FC_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.FC_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.FC_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.FC_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'GIB_VERSION_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.GIB_VERSION_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.GIB_VERSION_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.GIB_VERSION_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.GIB_VERSION_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'GIB_AUTHTXN_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.GIB_AUTHTXN_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.GIB_AUTHTXN_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.GIB_AUTHTXN_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.GIB_AUTHTXN_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'IVR_PWD_STATE_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.IVR_PWD_STATE_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.IVR_PWD_STATE_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.IVR_PWD_STATE_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.IVR_PWD_STATE_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'SPECIAL_SERVICE_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.SPECIAL_SERVICE_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.SPECIAL_SERVICE_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.SPECIAL_SERVICE_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.SPECIAL_SERVICE_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'NO_BANK_STATM_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.NO_BANK_STATM_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.NO_BANK_STATM_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.NO_BANK_STATM_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.NO_BANK_STATM_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'TRAVEL_CARD_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.TRAVEL_CARD_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.TRAVEL_CARD_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.TRAVEL_CARD_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.TRAVEL_CARD_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CAPITAL' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CAPITAL; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CAPITAL,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CAPITAL; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CAPITAL); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'YEAR_REVENUE_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.YEAR_REVENUE_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.YEAR_REVENUE_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.YEAR_REVENUE_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.YEAR_REVENUE_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'TW_FUNDED_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.TW_FUNDED_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.TW_FUNDED_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.TW_FUNDED_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.TW_FUNDED_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'UD_EXTENSION_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.UD_EXTENSION_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.UD_EXTENSION_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.UD_EXTENSION_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.UD_EXTENSION_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'DEBT_REFRESH_CLOSED' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.DEBT_REFRESH_CLOSED; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.DEBT_REFRESH_CLOSED,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.DEBT_REFRESH_CLOSED; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.DEBT_REFRESH_CLOSED); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'DEBT_CLEAN_CLOSED' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.DEBT_CLEAN_CLOSED; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.DEBT_CLEAN_CLOSED,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.DEBT_CLEAN_CLOSED; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.DEBT_CLEAN_CLOSED); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PIB_VERSION' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PIB_VERSION; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PIB_VERSION,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PIB_VERSION; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PIB_VERSION); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PIB_STATUS' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PIB_STATUS; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PIB_STATUS,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PIB_STATUS; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PIB_STATUS); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PIB_APPLY_DATE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PIB_APPLY_DATE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PIB_APPLY_DATE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PIB_APPLY_DATE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PIB_APPLY_DATE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PIB_CANCEL_DATE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PIB_CANCEL_DATE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PIB_CANCEL_DATE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PIB_CANCEL_DATE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PIB_CANCEL_DATE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'OTP_SERVICE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.OTP_SERVICE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.OTP_SERVICE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.OTP_SERVICE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.OTP_SERVICE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'SUPPLEMENTARY_PREMIUM_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.SUPPLEMENTARY_PREMIUM_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.SUPPLEMENTARY_PREMIUM_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.SUPPLEMENTARY_PREMIUM_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.SUPPLEMENTARY_PREMIUM_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'RECEIPT_BUSINESS_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.RECEIPT_BUSINESS_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.RECEIPT_BUSINESS_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.RECEIPT_BUSINESS_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.RECEIPT_BUSINESS_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'FAX_TRANSACTION_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.FAX_TRANSACTION_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.FAX_TRANSACTION_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.FAX_TRANSACTION_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.FAX_TRANSACTION_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CUST_RATING' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CUST_RATING; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CUST_RATING,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CUST_RATING; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CUST_RATING); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'TELLER_NO' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.TELLER_NO; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.TELLER_NO,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.TELLER_NO; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.TELLER_NO); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'DATA_ENTRY_DATE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.DATA_ENTRY_DATE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.DATA_ENTRY_DATE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.DATA_ENTRY_DATE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.DATA_ENTRY_DATE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'REPORT_DATE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.REPORT_DATE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.REPORT_DATE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.REPORT_DATE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.REPORT_DATE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'REPORT_UNIT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.REPORT_UNIT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.REPORT_UNIT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.REPORT_UNIT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.REPORT_UNIT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CREATION_UNIT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CREATION_UNIT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CREATION_UNIT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CREATION_UNIT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CREATION_UNIT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'REPORT_DESCRIPTION' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.REPORT_DESCRIPTION; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.REPORT_DESCRIPTION,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.REPORT_DESCRIPTION; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.REPORT_DESCRIPTION); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'GROWN_UP_GUARDIAN_SHIP' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.GROWN_UP_GUARDIAN_SHIP; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.GROWN_UP_GUARDIAN_SHIP,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.GROWN_UP_GUARDIAN_SHIP; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.GROWN_UP_GUARDIAN_SHIP); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'PARTY_KIND' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.PARTY_KIND; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.PARTY_KIND,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.PARTY_KIND; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.PARTY_KIND); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'FIN_HOLD_CUS_STATE_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.FIN_HOLD_CUS_STATE_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.FIN_HOLD_CUS_STATE_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.FIN_HOLD_CUS_STATE_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.FIN_HOLD_CUS_STATE_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'NOTE_ON_SAVE_TRASFER' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.NOTE_ON_SAVE_TRASFER; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.NOTE_ON_SAVE_TRASFER,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.NOTE_ON_SAVE_TRASFER; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.NOTE_ON_SAVE_TRASFER); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'NOTE_ON_CREDIT' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.NOTE_ON_CREDIT; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.NOTE_ON_CREDIT,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.NOTE_ON_CREDIT; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.NOTE_ON_CREDIT); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'NOTE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.NOTE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.NOTE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.NOTE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.NOTE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'NO_SEND_TO_CIP_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.NO_SEND_TO_CIP_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.NO_SEND_TO_CIP_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.NO_SEND_TO_CIP_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.NO_SEND_TO_CIP_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CROSS_SELLING_NOTE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CROSS_SELLING_NOTE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CROSS_SELLING_NOTE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CROSS_SELLING_NOTE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CROSS_SELLING_NOTE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'BRANCH_OR_SUBSIDIARY_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.BRANCH_OR_SUBSIDIARY_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.BRANCH_OR_SUBSIDIARY_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.BRANCH_OR_SUBSIDIARY_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.BRANCH_OR_SUBSIDIARY_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'JOB_POSITION_NAME' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.JOB_POSITION_NAME; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.JOB_POSITION_NAME,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.JOB_POSITION_NAME; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.JOB_POSITION_NAME); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'LOAN_NOTE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.LOAN_NOTE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.LOAN_NOTE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.LOAN_NOTE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.LOAN_NOTE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'REFUSE_TXN_DATE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.REFUSE_TXN_DATE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.REFUSE_TXN_DATE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.REFUSE_TXN_DATE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.REFUSE_TXN_DATE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'MGNT_UNIT_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.MGNT_UNIT_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.MGNT_UNIT_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.MGNT_UNIT_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.MGNT_UNIT_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'EFG_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.EFG_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.EFG_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.EFG_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.EFG_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CROSS_SELLING_FLAG' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CROSS_SELLING_FLAG; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CROSS_SELLING_FLAG,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CROSS_SELLING_FLAG; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CROSS_SELLING_FLAG); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CROSS_SELLING_DATE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CROSS_SELLING_DATE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CROSS_SELLING_DATE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CROSS_SELLING_DATE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CROSS_SELLING_DATE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CROSS_SELLING_TIME' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CROSS_SELLING_TIME; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CROSS_SELLING_TIME,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CROSS_SELLING_TIME; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CROSS_SELLING_TIME); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CROSS_SELLING_VERSION' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CROSS_SELLING_VERSION; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CROSS_SELLING_VERSION,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CROSS_SELLING_VERSION; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CROSS_SELLING_VERSION); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CROSS_SELLING_IP' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CROSS_SELLING_IP; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CROSS_SELLING_IP,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CROSS_SELLING_IP; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CROSS_SELLING_IP); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CROSS_SELLING_CHANNEL' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CROSS_SELLING_CHANNEL; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CROSS_SELLING_CHANNEL,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CROSS_SELLING_CHANNEL; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CROSS_SELLING_CHANNEL); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'CROSS_SELLING_UPD_PERSON' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.CROSS_SELLING_UPD_PERSON; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.CROSS_SELLING_UPD_PERSON,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.CROSS_SELLING_UPD_PERSON; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.CROSS_SELLING_UPD_PERSON); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'AML_REVIEW_STATUS_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.AML_REVIEW_STATUS_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.AML_REVIEW_STATUS_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.AML_REVIEW_STATUS_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.AML_REVIEW_STATUS_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                WHEN 'AML_CONTROL_STATUS_CODE' THEN IF i_is_missing_field = TRUE THEN o_before_value := i_customer.AML_CONTROL_STATUS_CODE; o_after_value := o_before_value; ELSE IF nvl(g_model_tab(i_column_name).input_value,'_null') <> nvl(i_customer.AML_CONTROL_STATUS_CODE,'_null') THEN o_column_is_changed := TRUE; o_before_value := i_customer.AML_CONTROL_STATUS_CODE; o_after_value := g_model_tab(i_column_name).input_value; IF g_column_group_map.EXISTS(i_column_name) = TRUE THEN l_group_jo := io_group_column_jo.get_Object(g_column_group_map(i_column_name)); IF l_group_jo IS NULL THEN l_group_jo := NEW JSON_OBJECT_T; END IF; l_column_jo.put('IS_CHANGED' , true); l_column_jo.put('BEFORE_VALUE' , i_customer.AML_CONTROL_STATUS_CODE); l_column_jo.put('AFTER_VALUE' , g_model_tab(i_column_name).input_value); l_group_jo.put(i_column_name , l_column_jo); io_group_column_jo.put(g_column_group_map(i_column_name) , l_group_jo); END IF; END IF; END IF;
                ELSE    NULL;
            END CASE;
    END SP_PARSE_CUSTOMER_BEFORE_AFTER_VALUE;

    PROCEDURE SP_SAVE_CHANGELOG(i_true_insert_false_update  IN  boolean,
                                i_customer                  IN  CIFX.TB_CUSTOMER                                    %ROWTYPE, --顧客變更前record
                                i_json                      IN  CLOB,
                                i_service_interchange_id    IN  VARCHAR2,
                                i_sender_code               IN  cifx.TB_SERVICE_INTERCHANGE.SENDER_CODE             %TYPE,
                                i_customer_id               IN  cifx.TB_CUSTOMER.CUSTOMER_ID                        %TYPE,
                                i_circikey                  IN  CIFX.TB_CUSTOMER.CIF_VERIFIED_ID                    %TYPE,
                                i_cif_original_id           IN  CIFX.TB_CHANGE_LOG_LINEITEM.CIF_ORIGINAL_ID         %TYPE,
                                i_birthday                  IN  CIFX.TB_CHANGE_LOG_LINEITEM.BIRTHDAY                %TYPE,
                                i_ap_server_to_exec         IN  cifx.TB_SERVICE_EXECUTION_CONTROL.AP_SERVER_TO_EXEC %TYPE) AS
/* 功能：顧客建檔、異動時寫變更紀錄
 * 注意：
 *      1.json_object_t 要用json變數接，然後判斷null時new 初始化，不然操作json function時會發ORA-30625。
 *      2.目前群組欄位只可套用一層，超過時需要改寫code
 */
        l_change_log_id             cifx.TB_CHANGE_LOG.CHANGE_LOG_ID    %TYPE;
        l_column_name_index         cifx.TB_COLUMN_CODE.COLUMN_NAME     %TYPE;
        l_timestamp                 TIMESTAMP;
        l_column_is_changed         boolean := FALSE;
        l_any_column_is_changed     boolean := FALSE;
        l_any_group_column_changed  boolean := FALSE;
        l_before_value              cifx.TB_CHANGE_LOG_LINEITEM.BEFORE_VALUE    %TYPE := NULL;
        l_after_value               cifx.TB_CHANGE_LOG_LINEITEM.CHANGED_VALUE   %TYPE := NULL;
        l_force_update              cifx.TB_CHANGE_LOG.FORCE_UPDATE             %TYPE := NULL;

        l_root                      json_object_t;
        l_header                    json_object_t;
        l_requestBody               json_object_t;
        l_requestBody_header        json_object_t;
        l_requestBody_header_teller json_object_t;
        l_requestBody_optional      json_object_t;

        l_ori_trade_seq_no          cifx.TB_CHANGE_LOG.ORI_TRADE_SEQ_NO         %TYPE       := NULL;
        l_branch_id                 cifx.TB_CHANGE_LOG.BRANCH_ID                %TYPE       := NULL;
        l_supervisor_card_code      cifx.TB_CHANGE_LOG.SUPERVISOR_CARD_CODE     %TYPE       := NULL;
        l_txn_time                  cifx.TB_CHANGE_LOG.TXN_TIME                 %TYPE       := NULL;
        l_sec                       cifx.TB_SERVICE_EXECUTION_CONTROL           %ROWTYPE    := null;

        CURSOR c_column_code_opt IS
            SELECT COLUMN_GROUP, COLUMN_NAME  FROM cifx.TB_COLUMN_CODE_OPT tcco
            WHERE TABLE_NAME = 'TB_CUSTOMER' AND COLUMN_GROUP IS NOT NULL
            ORDER BY COLUMN_GROUP;
        --bulk collect用變數
        TYPE r_group_column_type IS record(
            COLUMN_GROUP    cifx.TB_COLUMN_CODE_OPT.COLUMN_GROUP %TYPE,
            COLUMN_NAME     cifx.TB_COLUMN_CODE_OPT.COLUMN_NAME %TYPE);
        TYPE t_group_column_type IS TABLE OF r_group_column_type INDEX BY pls_integer;
        l_group_column_tab          t_group_column_type;
        --寫變更紀錄 群組欄位用變數
        l_group_column_jo           json_object_t := NEW json_object_t;--存column-array的before after內容
        l_tmp_group_jo              json_object_t := NEW json_object_t;--temp變數
        l_tmp_column_jo             json_object_t := NEW json_object_t;--temp變數
        l_tmp_col_keys              JSON_KEY_LIST := NEW JSON_KEY_LIST();
        l_dummy_jo                  json_object_t := NEW json_object_t;
        l_dummy_boolean             boolean;

        l_group_jo                  JSON_OBJECT_T := NEW JSON_OBJECT_T;
        l_column_jo                 JSON_OBJECT_T := NEW JSON_OBJECT_T;
        l_ja                        JSON_ARRAY_T  := NEW JSON_ARRAY_T;
        l_keys                      JSON_KEY_LIST := NEW JSON_KEY_LIST();
    BEGIN
        dbms_output.put_line('==  SP_SAVE_CHANGELOG start ===');--developement debug tracing
        l_column_name_index := g_model_tab.FIRST;--db column name
        g_column_group_map.DELETE;
        IF  g_model_tab.count > 0   THEN
            l_change_log_id     := CIFX.FN_UUID_NUMBER30;   --為TB_CHANGE_LOG PK編UUID
            l_timestamp         := CURRENT_TIMESTAMP;
            OPEN    c_column_code_opt;
            FETCH   c_column_code_opt BULK COLLECT INTO l_group_column_tab;
            CLOSE   c_column_code_opt;
            --轉array(index:columnName), json
            /* {
             *      group1 : {
             *          col1 : "group1",
             *          col2 : "group1"
             *      }
             * }
             */
            FOR ii IN 1..l_group_column_tab.count LOOP
                --set array
                g_column_group_map(l_group_column_tab(ii).COLUMN_NAME) := l_group_column_tab(ii).COLUMN_GROUP;
                --set json
                l_tmp_group_jo := g_full_group_column_jo.get_Object(l_group_column_tab(ii).COLUMN_GROUP);
                IF  l_tmp_group_jo IS NULL  THEN
                    l_tmp_group_jo := NEW JSON_OBJECT_T;--todo:NEW JSON_OBJECT_T performance issue???
                END IF;
                l_tmp_group_jo.put(l_group_column_tab(ii).COLUMN_NAME, l_group_column_tab(ii).COLUMN_GROUP);
                g_full_group_column_jo.put(l_group_column_tab(ii).COLUMN_GROUP, l_tmp_group_jo);
            END LOOP;
        END IF;
        dbms_output.put_line('==  column log start ==');
        WHILE   l_column_name_index IS NOT NULL LOOP
            SP_PARSE_CUSTOMER_BEFORE_AFTER_VALUE(FALSE, l_column_name_index, i_customer, l_before_value, l_after_value, l_column_is_changed,
                                            l_group_column_jo);--1.解析欄位變更前值   2.解析欄位變更後值   3.For群組未變更欄位,一律設值變更前內容(IN, IN, IN, OUT, OUT, OUT, IN OUT)
            IF  l_column_is_changed = TRUE  THEN
                --ANY CHANGE:每位顧客只loop一次
                IF  l_any_column_is_changed = FALSE THEN
                    l_any_column_is_changed := TRUE;
                    SP_LOAD_COLUMN_CODE_MAP;                --初始化全域變數g_column_code_tab(column_name轉column_code_id)
                    l_root := json_object_t.parse(i_json);
                    l_header := l_root.get_Object('header');
                    IF  l_header IS NULL THEN
                        l_header := NEW json_object_t;
                    END IF;
                    l_requestBody   := l_root.get_Object('requestBody');
                    IF  l_requestBody IS NULL THEN
                        l_requestBody := NEW json_object_t;
                    END IF;
                    l_requestBody_header := l_requestBody.get_Object('header');
                    IF  l_requestBody_header IS NULL THEN
                        l_requestBody_header := NEW json_object_t;
                    END IF;
                    l_requestBody_header_teller := l_requestBody_header.get_Object('teller');
                    IF  l_requestBody_header_teller IS NULL THEN
                        l_requestBody_header_teller := NEW json_object_t;
                    END IF;
                    l_requestBody_optional := l_requestBody.get_Object('optional');
                    IF  l_requestBody_optional IS NULL THEN
                        l_requestBody_optional := NEW json_object_t;
                    END IF;
                    l_ori_trade_seq_no      := l_requestBody_header.get_string('oriTradeSeqNo');--" 999915"
                    l_branch_id             := l_header.get_string('unitCode');
                    l_supervisor_card_code  := l_requestBody_header_teller.get_string('supervisorCardCode');
                    l_txn_time              := l_header.get_string('txnTime');
                END IF;

                --json欄位是參考：資料字典DD excel、cifx專案的RequestTemplate.json
                --非群組欄位在這裡寫變更紀錄
                IF  NOT g_column_group_map.EXISTS(l_column_name_index)   THEN
                    SP_INSERT_CHANGE_LOG_LINEITEM(i_change_log_lineitem_id    =>CIFX.FN_UUID_NUMBER30,
                                                  i_change_log_id             =>l_change_log_id,
                                                  i_table_pk                  =>i_customer_id,
                                                  i_msg_no                    =>l_header.get_string('msgNo'),--"TSC001_00_20190619102654_442"
                                                  i_sent_priority             =>null,
                                                  i_func_id                   =>null,--$.requestBody.model.functionId??? todo
                                                  i_change_type               =>null,--todo異動類型(增改刪)
                                                  i_changed_column_code_id    =>g_column_code_tab(l_column_name_index).COLUMN_CODE_ID,
                                                  i_before_value              =>l_before_value,
                                                  i_changed_value             =>l_after_value,
                                                  i_create_timestamp          =>sysdate,
                                                  i_sent_timestamp            =>null,--todo:成功發送給CIP的時間。用來分辨群組(sent_priority)發送時部分失敗重發送的項目
                                                  i_circi_key                 =>i_circikey,
                                                  i_property_type_code        =>null,
                                                  i_cif_original_id           =>i_cif_original_id,
                                                  i_birthday                  =>i_birthday);
                ELSE
                    l_any_group_column_changed := TRUE;
                END IF;
            END IF;
            l_column_name_index := g_model_tab.NEXT(l_column_name_index);
        END LOOP;
        dbms_output.put_line('==  column log end   ==');
        dbms_output.put_line('==  group log start ==');--developement debug tracing
        --群組欄位在這裡 整理+寫 變更紀錄
        IF  l_any_group_column_changed = TRUE   THEN
            l_keys := l_group_column_jo.get_keys;
            --整理
            FOR ii IN 1..l_keys.count LOOP                              --loop group
                l_group_jo                  := l_group_column_jo.get_Object(l_keys(ii));        --本次異動群組欄位
                l_tmp_group_jo              := g_full_group_column_jo.get_Object(l_keys(ii));   --tb_column_code_opt清單
                l_tmp_col_keys              := l_tmp_group_jo.get_keys;
                FOR jj IN 1..l_tmp_col_keys.count LOOP                  --loop column
                    IF  NOT l_group_jo.has(l_tmp_col_keys(jj))  THEN    --本次沒異動的column，才要補before after value
                        l_tmp_column_jo     := NEW json_object_t;
                        SP_PARSE_CUSTOMER_BEFORE_AFTER_VALUE(TRUE, l_tmp_col_keys(jj), i_customer, l_before_value, l_after_value,
                                                        l_dummy_boolean, l_dummy_jo);--1.解析欄位變更前值   2.解析欄位變更後值   3.For群組未變更欄位,一律設值變更前內容(IN, IN, IN, OUT, OUT, OUT, IN OUT)
                        l_tmp_column_jo.put('BEFORE_VALUE'  , l_before_value);
                        l_tmp_column_jo.put('AFTER_VALUE'   , l_after_value);
                        l_group_jo.put(l_tmp_col_keys(jj)   , l_tmp_column_jo);
                    END IF;
                END LOOP;
                l_group_column_jo.put(l_keys(ii)            , l_group_jo);
            END LOOP;
            dbms_output.put_line('prepared group json change log='||l_group_column_jo.to_String);--developement debug tracing
            --寫
            FOR ii IN 1..l_keys.count LOOP                              --loop group
                l_group_jo                  := l_group_column_jo.get_Object(l_keys(ii));
                l_tmp_col_keys              := l_group_jo.get_keys;
                FOR jj IN 1..l_tmp_col_keys.count LOOP                  --loop column
                    l_tmp_column_jo := l_group_jo.get_Object(l_tmp_col_keys(jj));
                    SP_INSERT_CHANGE_LOG_LINEITEM(i_change_log_lineitem_id    =>CIFX.FN_UUID_NUMBER30,
                                                  i_change_log_id             =>l_change_log_id,
                                                  i_table_pk                  =>i_customer_id,
                                                  i_msg_no                    =>l_header.get_String('msgNo'),--"TSC001_00_20190619102654_442"
                                                  i_sent_priority             =>null,
                                                  i_func_id                   =>null,--$.requestBody.model.functionId??? todo
                                                  i_change_type               =>null,--todo異動類型(增改刪)
                                                  i_changed_column_code_id    =>g_column_code_tab(l_tmp_col_keys(jj)).COLUMN_CODE_ID,
                                                  i_before_value              =>l_tmp_column_jo.get_String('BEFORE_VALUE'),
                                                  i_changed_value             =>l_tmp_column_jo.get_String('AFTER_VALUE'),
                                                  i_create_timestamp          =>sysdate,
                                                  i_sent_timestamp            =>null,--todo:成功發送給CIP的時間。用來分辨群組(sent_priority)發送時部分失敗重發送的項目
                                                  i_circi_key                 =>i_circikey,
                                                  i_property_type_code        =>null,
                                                  i_cif_original_id           =>i_cif_original_id,
                                                  i_birthday                  =>i_birthday);
                END LOOP;
            END LOOP;
        END IF;
        dbms_output.put_line('==  group log end   ===');--developement debug tracing

        IF  l_any_column_is_changed THEN
            /* l_force_update(CIFX.TB_CHANGE_LOG.FORCE_UPDATE)值域應該是設計如下
             *      顧客確認註記(同步cip)，欄位加總（1戶籍地址   2:  聯繫手機 手機一    4: EMAIL）
             *      戶籍地址(1)確認 + email(4)確認 = 5
             *      確認同步：  1,2,3,4,5,6,7,Y(全欄位)
             *      不做同步：   0, null, 其他...
             *
             * JSON field(forceUpdate)營運(nbs...)有多出些奇怪值：空白、N
             */
            l_force_update := l_requestBody_optional.get_String('forceUpdate');
            SP_INSERT_CHANGE_LOG(i_change_log_id           =>l_change_log_id,
                                 i_service_interchange_id  =>i_service_interchange_id,
                                 i_circi_key               =>i_circikey,
                                 i_source_type             =>'00',--real time
                                 i_ori_trade_seq_no        =>l_ori_trade_seq_no,
                                 i_txn_operation_date      =>to_char(to_timestamp(l_header.get_string('txnTime'),'yyyy-mm-dd hh24:mi:ss'),'yyyymmdd'),--"txnTime": "2019-06-17 09:14:02"
                                 i_txn_sequence            =>rpad(l_branch_id,4) || rpad(l_ori_trade_seq_no,7),--交易序號 (分行代號(4)+交易序號(7))
                                 i_txn_operation_time      =>TO_CHAR(SYSDATE ,'hh24miss'),
                                 i_supervisor_code         =>substr(l_supervisor_card_code,5,2),--主管的櫃員卡2碼卡號
                                 i_tx_id                   =>l_requestBody_header.get_string('txId'),
                                 i_branch_id               =>l_branch_id,
                                 i_teller_id               =>l_requestBody_header_teller.get_string('tellerId'),
                                 i_operate_id              =>l_requestBody_header_teller.get_string('operateId'),--櫃員的櫃員卡2碼卡號
                                 i_supervisor_id           =>l_requestBody_header_teller.get_string('supervisorId'),
                                 i_supervisor_card_code    =>l_supervisor_card_code,
                                 i_force_update            =>l_force_update,
                                 i_create_timestamp        =>to_timestamp(to_char(SYSDATE,'yyyy-mm-dd hh24:mi:ss'), 'yyyy-mm-dd hh24:mi:ss'),
                                 i_no_send_to_cip_flag     =>null,--僅initial load匯入及由使用提出要取消block之需求
                                 i_txn_time                =>to_timestamp(l_txn_time,'yyyy-mm-dd hh24:mi:ss'),--前端系統timestamp
                                 i_trade_date_in_ap        =>to_char(to_timestamp(l_txn_time,'yyyy-mm-dd hh24:mi:ss'),'yyyymmdd'),
                                 i_trade_time_in_ap        =>to_char(to_timestamp(l_txn_time,'yyyy-mm-dd hh24:mi:ss'),'hh24miss'),
                                 i_edls_ori_trade_seq_no   =>null,--todo
                                 i_edls_source_code        =>null,--todo
                                 i_sender_code             =>l_header.get_string('senderCode'));
            --建檔直接發顧客確認同步電文(to CIP)，異動由前端異動欄位(force update)決定同步CIP
            IF  i_true_insert_false_update  OR  l_force_update IN ('1','2','3','4','5','6','7','Y') THEN
                l_sec.CIRCI_KEY                 := i_circikey;
                l_sec.SERVICE_INTERCHANGE_ID    := i_service_interchange_id;
                l_sec.REQ_TIMESTAMP             := sysdate;
                l_sec.AP_SERVER_TO_EXEC         := i_ap_server_to_exec;
                SP_INSERT_SERVICE_EXECUTION_CONTROL(l_sec); --寫一筆SEC，java準備發顧客確認電文(to CIP)
            END IF;
        END IF;
        dbms_output.put_line('==  SP_SAVE_CHANGELOG end ===');--developement debug tracing
    END SP_SAVE_CHANGELOG;

    PROCEDURE SP_INSERT_CHANGE_LOG(i_change_log_id           IN CIFX.TB_CHANGE_LOG.CHANGE_LOG_ID              %TYPE,
                                   i_service_interchange_id  IN CIFX.TB_CHANGE_LOG.SERVICE_INTERCHANGE_ID     %TYPE,
                                   i_circi_key               IN CIFX.TB_CHANGE_LOG.CIRCI_KEY                  %TYPE,
                                   i_source_type             IN CIFX.TB_CHANGE_LOG.SOURCE_TYPE                %TYPE,
                                   i_ori_trade_seq_no        IN CIFX.TB_CHANGE_LOG.ORI_TRADE_SEQ_NO           %TYPE,
                                   i_txn_operation_date      IN CIFX.TB_CHANGE_LOG.TXN_OPERATION_DATE         %TYPE,
                                   i_txn_sequence            IN CIFX.TB_CHANGE_LOG.TXN_SEQUENCE               %TYPE,
                                   i_txn_operation_time      IN CIFX.TB_CHANGE_LOG.TXN_OPERATION_TIME         %TYPE,
                                   i_supervisor_code         IN CIFX.TB_CHANGE_LOG.SUPERVISOR_CODE            %TYPE,
                                   i_tx_id                   IN CIFX.TB_CHANGE_LOG.TX_ID                      %TYPE,
                                   i_branch_id               IN CIFX.TB_CHANGE_LOG.BRANCH_ID                  %TYPE,
                                   i_teller_id               IN CIFX.TB_CHANGE_LOG.TELLER_ID                  %TYPE,
                                   i_operate_id              IN CIFX.TB_CHANGE_LOG.OPERATE_ID                 %TYPE,
                                   i_supervisor_id           IN CIFX.TB_CHANGE_LOG.SUPERVISOR_ID              %TYPE,
                                   i_supervisor_card_code    IN CIFX.TB_CHANGE_LOG.SUPERVISOR_CARD_CODE       %TYPE,
                                   i_force_update            IN CIFX.TB_CHANGE_LOG.FORCE_UPDATE               %TYPE,
                                   i_create_timestamp        IN CIFX.TB_CHANGE_LOG.CREATE_TIMESTAMP           %TYPE,--TIMESTAMP(6)
                                   i_no_send_to_cip_flag     IN CIFX.TB_CHANGE_LOG.NO_SEND_TO_CIP_FLAG        %TYPE,
                                   i_txn_time                IN CIFX.TB_CHANGE_LOG.TXN_TIME                   %TYPE,--TIMESTAMP(6)
                                   i_trade_date_in_ap        IN CIFX.TB_CHANGE_LOG.TRADE_DATE_IN_AP           %TYPE,
                                   i_trade_time_in_ap        IN CIFX.TB_CHANGE_LOG.TRADE_TIME_IN_AP           %TYPE,
                                   i_edls_ori_trade_seq_no   IN CIFX.TB_CHANGE_LOG.EDLS_ORI_TRADE_SEQ_NO      %TYPE,
                                   i_edls_source_code        IN CIFX.TB_CHANGE_LOG.EDLS_SOURCE_CODE           %TYPE,
                                   i_sender_code             IN CIFX.TB_CHANGE_LOG.SENDER_CODE                %TYPE) AS
        l_change_log_id             VARCHAR2(150 CHAR) := '''' || i_change_log_id              || '''';--developement debug tracing
        l_service_interchange_id    VARCHAR2(150 CHAR) := '''' || i_service_interchange_id     || '''';--developement debug tracing
        l_circi_key                 VARCHAR2(150 CHAR) := '''' || i_circi_key                  || '''';--developement debug tracing
        l_source_type               VARCHAR2(150 CHAR) := '''' || i_source_type                || '''';--developement debug tracing
        l_ori_trade_seq_no          VARCHAR2(150 CHAR) := '''' || i_ori_trade_seq_no           || '''';--developement debug tracing
        l_txn_operation_date        VARCHAR2(150 CHAR) := '''' || i_txn_operation_date         || '''';--developement debug tracing
        l_txn_sequence              VARCHAR2(150 CHAR) := '''' || i_txn_sequence               || '''';--developement debug tracing
        l_txn_operation_time        VARCHAR2(150 CHAR) := '''' || i_txn_operation_time         || '''';--developement debug tracing
        l_supervisor_code           VARCHAR2(150 CHAR) := '''' || i_supervisor_code            || '''';--developement debug tracing
        l_tx_id                     VARCHAR2(150 CHAR) := '''' || i_tx_id                      || '''';--developement debug tracing
        l_branch_id                 VARCHAR2(150 CHAR) := '''' || i_branch_id                  || '''';--developement debug tracing
        l_teller_id                 VARCHAR2(150 CHAR) := '''' || i_teller_id                  || '''';--developement debug tracing
        l_operate_id                VARCHAR2(150 CHAR) := '''' || i_operate_id                 || '''';--developement debug tracing
        l_supervisor_id             VARCHAR2(150 CHAR) := '''' || i_supervisor_id              || '''';--developement debug tracing
        l_supervisor_card_code      VARCHAR2(150 CHAR) := '''' || i_supervisor_card_code       || '''';--developement debug tracing
        l_force_update              VARCHAR2(150 CHAR) := '''' || i_force_update               || '''';--developement debug tracing
        l_no_send_to_cip_flag       VARCHAR2(150 CHAR) := '''' || i_no_send_to_cip_flag        || '''';--developement debug tracing
        l_trade_date_in_ap          VARCHAR2(150 CHAR) := '''' || i_trade_date_in_ap           || '''';--developement debug tracing
        l_trade_time_in_ap          VARCHAR2(150 CHAR) := '''' || i_trade_time_in_ap           || '''';--developement debug tracing
        l_edls_ori_trade_seq_no     VARCHAR2(150 CHAR) := '''' || i_edls_ori_trade_seq_no      || '''';--developement debug tracing
        l_edls_source_code          VARCHAR2(150 CHAR) := '''' || i_edls_source_code           || '''';--developement debug tracing
        l_sender_code               VARCHAR2(150 CHAR) := '''' || i_sender_code                || '''';--developement debug tracing
    BEGIN
        DBMS_OUTPUT.PUT_LINE('insert change log sql='||'INSERT INTO TB_CHANGE_LOG(CHANGE_LOG_ID, SERVICE_INTERCHANGE_ID, CIRCI_KEY, SOURCE_TYPE, ORI_TRADE_SEQ_NO, TXN_OPERATION_DATE, TXN_SEQUENCE, TXN_OPERATION_TIME, SUPERVISOR_CODE, TX_ID, BRANCH_ID, TELLER_ID, OPERATE_ID, SUPERVISOR_ID, SUPERVISOR_CARD_CODE, FORCE_UPDATE, CREATE_TIMESTAMP, NO_SEND_TO_CIP_FLAG, TXN_TIME, TRADE_DATE_IN_AP, TRADE_TIME_IN_AP, EDLS_ORI_TRADE_SEQ_NO, EDLS_SOURCE_CODE, SENDER_CODE) VALUES (' || l_change_log_id || ', ' || l_service_interchange_id || ', ' || l_circi_key || ', ' || l_source_type || ', ' || l_ori_trade_seq_no || ', ' || l_txn_operation_date || ', ' || l_txn_sequence || ', ' || l_txn_operation_time || ', ' || l_supervisor_code || ', ' || l_tx_id || ', ' || l_branch_id || ', ' || l_teller_id || ', ' || l_operate_id || ', ' || l_supervisor_id || ', ' || l_supervisor_card_code || ', ' || l_force_update || ', ' || i_create_timestamp || ', ' || l_no_send_to_cip_flag || ', ' || i_txn_time || ', ' || l_trade_date_in_ap || ', ' || l_trade_time_in_ap || ', ' || l_edls_ori_trade_seq_no || ', ' || l_edls_source_code || ', ' || l_sender_code || ')');--developement debug tracing
        INSERT INTO cifx.TB_CHANGE_LOG(CHANGE_LOG_ID, SERVICE_INTERCHANGE_ID, CIRCI_KEY, SOURCE_TYPE, ORI_TRADE_SEQ_NO, TXN_OPERATION_DATE, TXN_SEQUENCE,
                                    TXN_OPERATION_TIME, SUPERVISOR_CODE, TX_ID, BRANCH_ID, TELLER_ID, OPERATE_ID, SUPERVISOR_ID, SUPERVISOR_CARD_CODE,
                                    FORCE_UPDATE, CREATE_TIMESTAMP, NO_SEND_TO_CIP_FLAG, TXN_TIME, TRADE_DATE_IN_AP, TRADE_TIME_IN_AP,
                                    EDLS_ORI_TRADE_SEQ_NO, EDLS_SOURCE_CODE, SENDER_CODE)
        VALUES  (i_change_log_id, i_service_interchange_id, i_circi_key, i_source_type, i_ori_trade_seq_no, i_txn_operation_date, i_txn_sequence,
                i_txn_operation_time, i_supervisor_code, i_tx_id, i_branch_id, i_teller_id, i_operate_id, i_supervisor_id, i_supervisor_card_code,
                i_force_update, i_create_timestamp, i_no_send_to_cip_flag, i_txn_time, i_trade_date_in_ap, i_trade_time_in_ap,
                i_edls_ori_trade_seq_no, i_edls_source_code, i_sender_code);
    END SP_INSERT_CHANGE_LOG;

    PROCEDURE SP_INSERT_CHANGE_LOG_LINEITEM(i_change_log_lineitem_id    IN  CIFX.TB_CHANGE_LOG_LINEITEM.CHANGE_LOG_LINEITEM_ID      %TYPE,
                                            i_change_log_id             IN  CIFX.TB_CHANGE_LOG_LINEITEM.CHANGE_LOG_ID               %TYPE,
                                            i_table_pk                  IN  CIFX.TB_CHANGE_LOG_LINEITEM.TABLE_PK                    %TYPE,
                                            i_msg_no                    IN  CIFX.TB_CHANGE_LOG_LINEITEM.MSG_NO                      %TYPE,
                                            i_sent_priority             IN  CIFX.TB_CHANGE_LOG_LINEITEM.SENT_PRIORITY               %TYPE,--NUMBER(3,0)
                                            i_func_id                   IN  CIFX.TB_CHANGE_LOG_LINEITEM.FUNC_ID                     %TYPE,
                                            i_change_type               IN  CIFX.TB_CHANGE_LOG_LINEITEM.CHANGE_TYPE                 %TYPE,
                                            i_changed_column_code_id    IN  CIFX.TB_CHANGE_LOG_LINEITEM.CHANGED_COLUMN_CODE_ID      %TYPE,
                                            i_before_value              IN  CIFX.TB_CHANGE_LOG_LINEITEM.BEFORE_VALUE                %TYPE,
                                            i_changed_value             IN  CIFX.TB_CHANGE_LOG_LINEITEM.CHANGED_VALUE               %TYPE,--TIMESTAMP(6)
                                            i_create_timestamp          IN  CIFX.TB_CHANGE_LOG_LINEITEM.CREATE_TIMESTAMP            %TYPE,--TIMESTAMP(6)
                                            i_sent_timestamp            IN  CIFX.TB_CHANGE_LOG_LINEITEM.SENT_TIMESTAMP              %TYPE,
                                            i_circi_key                 IN  CIFX.TB_CHANGE_LOG_LINEITEM.CIRCI_KEY                   %TYPE,
                                            i_property_type_code        IN  CIFX.TB_CHANGE_LOG_LINEITEM.PROPERTY_TYPE_CODE          %TYPE,
                                            i_cif_original_id           IN  CIFX.TB_CHANGE_LOG_LINEITEM.CIF_ORIGINAL_ID             %TYPE,
                                            i_birthday                  IN  CIFX.TB_CHANGE_LOG_LINEITEM.BIRTHDAY                    %TYPE) AS
        l_change_log_lineitem_id        VARCHAR2(210 CHAR) := '''' || i_change_log_lineitem_id    || '''';--developement debug tracing
        l_change_log_id                 VARCHAR2(210 CHAR) := '''' || i_change_log_id             || '''';--developement debug tracing
        l_table_pk                      VARCHAR2(210 CHAR) := '''' || i_table_pk                  || '''';--developement debug tracing
        l_msg_no                        VARCHAR2(210 CHAR) := '''' || i_msg_no                    || '''';--developement debug tracing
        l_func_id                       VARCHAR2(210 CHAR) := '''' || i_func_id                   || '''';--developement debug tracing
        l_change_type                   VARCHAR2(210 CHAR) := '''' || i_change_type               || '''';--developement debug tracing
        l_changed_column_code_id        VARCHAR2(210 CHAR) := '''' || i_changed_column_code_id    || '''';--developement debug tracing
        l_before_value                  VARCHAR2(210 CHAR) := '''' || i_before_value              || '''';--developement debug tracing
        l_changed_value                 VARCHAR2(210 CHAR) := '''' || i_changed_value             || '''';--developement debug tracing
        l_circi_key                     VARCHAR2(210 CHAR) := '''' || i_circi_key                 || '''';--developement debug tracing
        l_property_type_code            VARCHAR2(210 CHAR) := '''' || i_property_type_code        || '''';--developement debug tracing
        l_cif_original_id               VARCHAR2(210 CHAR) := '''' || i_cif_original_id           || '''';--developement debug tracing
        l_birthday                      VARCHAR2(210 CHAR) := '''' || i_birthday                  || '''';--developement debug tracing
    BEGIN
        DBMS_OUTPUT.PUT_LINE('insert change log lineitem sql='||'INSERT INTO cifx.TB_CHANGE_LOG_LINEITEM (CHANGE_LOG_LINEITEM_ID, CHANGE_LOG_ID, TABLE_PK, MSG_NO, SENT_PRIORITY, FUNC_ID, CHANGE_TYPE, CHANGED_COLUMN_CODE_ID, BEFORE_VALUE, CHANGED_VALUE, CREATE_TIMESTAMP, SENT_TIMESTAMP, CIRCI_KEY, PROPERTY_TYPE_CODE, CIF_ORIGINAL_ID, BIRTHDAY) VALUES (' || l_change_log_lineitem_id || ', ' || l_change_log_id || ', ' || l_table_pk || ', ' || l_msg_no || ', ' || i_sent_priority || ', ' || l_func_id || ', ' || l_change_type || ', ' || l_changed_column_code_id || ', ' || l_before_value || ', ' || l_changed_value || ', ' || i_create_timestamp || ', ' || i_sent_timestamp || ', ' || l_circi_key || ', ' || l_property_type_code || ', ' || l_cif_original_id || ', ' || l_birthday || ')');--developement debug tracing
        INSERT INTO cifx.TB_CHANGE_LOG_LINEITEM (CHANGE_LOG_LINEITEM_ID, CHANGE_LOG_ID, TABLE_PK, MSG_NO, SENT_PRIORITY, FUNC_ID, CHANGE_TYPE,
                                                CHANGED_COLUMN_CODE_ID, BEFORE_VALUE, CHANGED_VALUE, CREATE_TIMESTAMP, SENT_TIMESTAMP, CIRCI_KEY,
                                                PROPERTY_TYPE_CODE, CIF_ORIGINAL_ID, BIRTHDAY)
        VALUES  (i_change_log_lineitem_id, i_change_log_id, i_table_pk, i_msg_no, i_sent_priority, i_func_id, i_change_type,
                i_changed_column_code_id, i_before_value, i_changed_value, i_create_timestamp, i_sent_timestamp, i_circi_key,
                i_property_type_code, i_cif_original_id, i_birthday);
    END SP_INSERT_CHANGE_LOG_LINEITEM;

    PROCEDURE SP_INSERT_DELETE_KYC(i_circi_key                  IN  cifx.TB_CUST_KYC.CIRCI_KEY      %TYPE,
                                   i_kyc_code                   IN  cifx.TB_CUST_KYC.KYC_TYPE_CODE  %TYPE,
                                   i_true_insert_false_delete   IN  boolean) AS
/*  todo:待和前端nbs討論釘板kyc規格後才進行開發。
 *
 */
        CURSOR c_kyc IS
            SELECT  CODE_VALUE FROM cifx.TB_KEY_VALUE_CODE tkvc
            WHERE   CODE_CATEGORY ='kyc_type_code' AND ACTIVE = '1';
        TYPE l_t_kyc_type IS TABLE OF cifx.TB_KEY_VALUE_CODE.CODE_VALUE %TYPE INDEX BY pls_integer;
        l_t_def_kyc         l_t_kyc_type := NEW l_t_kyc_type();
    BEGIN
        IF  g_t_def_kyc.count = 0   THEN
            OPEN    c_kyc;
            FETCH   c_kyc   BULK COLLECT INTO l_t_def_kyc;
            CLOSE   c_kyc;
            FOR ii IN 1..l_t_def_kyc.count LOOP
                g_t_def_kyc(l_t_def_kyc(ii)) := l_t_def_kyc(ii);
            END LOOP;
        END IF;

        IF  g_t_cust_kyc.EXISTS(i_kyc_code) THEN
            IF  i_true_insert_false_delete = FALSE  THEN
                NULL;
            END IF;
        ELSE
            IF  i_true_insert_false_delete = TRUE   THEN
                NULL;
            END IF;
        END IF;
    END SP_INSERT_DELETE_KYC;

    PROCEDURE SP_INSERT_SERVICE_EXECUTION_CONTROL(i_sec_record      IN  CIFX.TB_SERVICE_EXECUTION_CONTROL   %ROWTYPE) AS
        l_r_sec             CIFX.TB_SERVICE_EXECUTION_CONTROL   %ROWTYPE;
        l_uuid              varchar2(50);
    BEGIN
        dbms_output.put_line('============== SP_INSERT_SERVICE_EXECUTION_CONTROL START =============');--developement debug tracing
        l_uuid := cifx.FN_UUID_NUMBER30;
        INSERT INTO CIFX.TB_SERVICE_EXECUTION_CONTROL (SERVICE_EXECUTION_CONTROL_ID,CIRCI_KEY,EXECUTION_TYPE,SERVICE_INTERCHANGE_ID,REQ_TIMESTAMP,
                                                    EXECUTION_STATE,RESULT_CODE,AP_SERVER_TO_EXEC,AP_SERVER_EXECUTING,AP_SERVER_EXECUTING_THREAD,
                                                    TO_EXEC_TIMESTAMP,EXECUTING_TIMESTAMP,EXECUTED_TIMESTAMP,BROKEN_TIMESTAMP)
        VALUES
        (l_uuid,--i_sec_record.SERVICE_EXECUTION_CONTROL_ID,
         i_sec_record.CIRCI_KEY,
         'STAGE1_EXECUTION',--i_sec_record.EXECUTION_TYPE,
         i_sec_record.SERVICE_INTERCHANGE_ID,
         i_sec_record.REQ_TIMESTAMP,
         'TO_EXECUTE',--i_sec_record.EXECUTION_STATE,
         NULL,--i_sec_record.RESULT_CODE,
         i_sec_record.AP_SERVER_TO_EXEC,
         NULL,--i_sec_record.AP_SERVER_EXECUTING,
         NULL,--i_sec_record.AP_SERVER_EXECUTING_THREAD,
         SYSTIMESTAMP,--i_sec_record.TO_EXEC_TIMESTAMP,
         NULL,--i_sec_record.EXECUTING_TIMESTAMP,
         NULL,--i_sec_record.EXECUTED_TIMESTAMP,
         NULL --i_sec_record.BROKEN_TIMESTAMP
         );
        SELECT * INTO l_r_sec FROM CIFX.TB_SERVICE_EXECUTION_CONTROL WHERE SERVICE_EXECUTION_CONTROL_ID = l_uuid;--developement debug tracing
        dbms_output.put_line('SERVICE_EXECUTION_CONTROL_ID=' || l_r_sec.SERVICE_EXECUTION_CONTROL_ID);--developement debug tracing
        dbms_output.put_line('CIRCI_KEY                   =' || l_r_sec.CIRCI_KEY                   );--developement debug tracing
        dbms_output.put_line('EXECUTION_TYPE              =' || l_r_sec.EXECUTION_TYPE              );--developement debug tracing
        dbms_output.put_line('SERVICE_INTERCHANGE_ID      =' || l_r_sec.SERVICE_INTERCHANGE_ID      );--developement debug tracing
        dbms_output.put_line('REQ_TIMESTAMP               =' || l_r_sec.REQ_TIMESTAMP               );--developement debug tracing
        dbms_output.put_line('EXECUTION_STATE             =' || l_r_sec.EXECUTION_STATE             );--developement debug tracing
        dbms_output.put_line('RESULT_CODE                 =' || l_r_sec.RESULT_CODE                 );--developement debug tracing
        dbms_output.put_line('AP_SERVER_TO_EXEC           =' || l_r_sec.AP_SERVER_TO_EXEC           );--developement debug tracing
        dbms_output.put_line('AP_SERVER_EXECUTING         =' || l_r_sec.AP_SERVER_EXECUTING         );--developement debug tracing
        dbms_output.put_line('AP_SERVER_EXECUTING_THREAD  =' || l_r_sec.AP_SERVER_EXECUTING_THREAD  );--developement debug tracing
        dbms_output.put_line('TO_EXEC_TIMESTAMP           =' || l_r_sec.TO_EXEC_TIMESTAMP           );--developement debug tracing
        dbms_output.put_line('EXECUTING_TIMESTAMP         =' || l_r_sec.EXECUTING_TIMESTAMP         );--developement debug tracing
        dbms_output.put_line('EXECUTED_TIMESTAMP          =' || l_r_sec.EXECUTED_TIMESTAMP          );--developement debug tracing
        dbms_output.put_line('BROKEN_TIMESTAMP            =' || l_r_sec.BROKEN_TIMESTAMP            );--developement debug tracing
        dbms_output.put_line('============== SP_INSERT_SERVICE_EXECUTION_CONTROL END =============');--developement debug tracing
    END SP_INSERT_SERVICE_EXECUTION_CONTROL;
END PG_TEST_UPSERT_CUSTOMER;

/
